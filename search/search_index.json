{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Home", "text": "<p>Welcome to the course website where you can find all the material for Asian American Studies 191A. Remember to use the Discord , GitHub discussion board , email , or utilize office hours if you have any questions!</p>"}, {"location": "#class-links", "title": "Class Links", "text": "Description Link Discord Server Invite Link Online Office Hours https://calendly.com/aa191a/office-hours Group Project Sheet https://docs.google.com/spreadsheets/d/1z8Wi2X4Qu1pp10-ArU6qgb9aINBtdKnSybHFJvTTRwE/edit?usp=sharing GitHub Discussions https://github.com/albertkun/24SU-ASIAAM-191A/discussions"}, {"location": "syllabus/", "title": "Syllabus", "text": "<p>Welcome to the syllabus for Asian American Studies 191A - Web Development and GIS for Social Change: Critical Data for Transforming Civil Society.</p>"}, {"location": "syllabus/#class-details", "title": "Class Details", "text": "<p>Asian American Studies Department, Summer Session A6, 2024</p> <p>Mondays, Wednesdays 3:15PM \u2013 5:20PM</p> <p>Online via Zoom</p>"}, {"location": "syllabus/#instructor", "title": "Instructor", "text": "<p>Albert S. Kochaphum (albertk@asianam.ucla.edu)</p>"}, {"location": "syllabus/#office-hours", "title": "Office Hours", "text": "<p>By appointment below:</p> <ul> <li>https://calendly.com/aa191a/office-hours</li> </ul>"}, {"location": "syllabus/#preparation", "title": "Preparation", "text": "<ul> <li>Fill out the pre-course survey before the first day of instruction (6/26/2024).</li> </ul>"}, {"location": "syllabus/#please-note-this-syllabus-is-subject-to-change", "title": "Please note: This syllabus is subject to change.", "text": "<p>(Lam, C., Kochaphum, A., UCLA HateCrimeMap, 2020)</p> <p>\u201cMaps have always been made; they may have been one of the first forms of human communication. Maps exist in many forms, can represent different ideas and are used for many purposes. In choosing what to represent, how to represent it and what not to represent, maps are expressions of power.\u201d </p> <p>\u2013Logan Cochrane, Jon Corbett and Peter Keller, Impact of Community-based and Participatory Mapping</p>"}, {"location": "syllabus/#course-description", "title": "Course Description", "text": "<p>Welcome to our journey into web programming and mapping! This course has no pre-requisites as it is designed for non-mappers and non-coders to bridge the divide between spatial data and its application in the non-profit world for activism.</p> <p>Spatial data is all around us, whether it\u2019s survey information with zip codes or the various landmarks that comprise what people consider their neighborhood. While maps, like census tracts or political boundaries, are traditionally extensions of authorities of power, participatory mapping seeks to break down those barriers. The objective of this course is to put mapping into the hands of students so that we can transfer these skills and frameworks to civil society.</p> <p>Recent student protests at UCLA during May 2024, where peaceful pro-Palestinian students, staff, and faculty members faced police brutality, highlight the urgent need for change and the power of collective action. The way COVID-19 played out in the United States underscored the institutional problems related to health, inequality, and the environment. The global crisis of climate change reinforces the institutional racism and environmental issues that have proliferated far beyond the U.S. national borders. These challenges all underscore the importance of building coalitions and using data and maps, as tools to communicate, organize, and drive change.</p> <p>Given all these issues, more so than ever, civil society is needed to build the coalitions and reassess priorities to usher in an era of political change. Mapping and data, are transformative tools that when used effectively can strengthen these connections between coalitions because they are representations of the physical world around us. </p> <p>However, in non-profits and other fields of civic engagement, these skills are underutilized or simply seen as something \u201cleft to the experts\u201d. This course prepares students to be informed digital citizens and transfer these applications for practical use in civil society. The two main objectives for this course are: </p> <ol> <li>To walk away with technical web development skills relevant to mapping for civil society.</li> <li>To apply an ethical mapping framework to such projects.</li> </ol>"}, {"location": "syllabus/#course-objectives", "title": "Course Objectives", "text": "<ul> <li> <p>Undertake analysis that are informed by critical data studies,     participatory frameworks, social fieldwork, and ethical     considerations.</p> </li> <li> <p>Learn transferable technical data and mapping skills as applied     through action-oriented, collaborative, and project-based research.</p> </li> <li> <p>Learn to critically assess datasets, digital mapping/visualization and AI      technologies for use in non-profits</p> </li> <li> <p>Learn to create an interactive web map that uses community-based     data from a non-profit or community-based organization</p> </li> <li> <p>Perform a data needs assessment for non-profits for an interactive     map that enhances the mission/goals of the organization</p> </li> <li> <p>Learn to work in research teams in order to conceptualize, design,     carry out, and deliver persuasive arguments through presenting a web     site that includes a web map and other digital media.</p> </li> </ul>"}, {"location": "syllabus/#course-materials", "title": "Course materials", "text": "<p>Dougherty, J. and Ilyankou, I. \u201cHands-On Data Visualization: Interactive Storytelling from Spreadsheets to Code\u201d O\u2019Reilly Media, Inc. (2021). Available at https://handsondataviz.org/</p>"}, {"location": "syllabus/#remote-learning-expectations-for-students", "title": "Remote Learning Expectations for Students", "text": "<p>Info</p> <p>Given the fast-paced nature of the course, lectures may be recorded on request and provided to students.</p> <p>Even though remote learning has become more common since the pandemic, I hope that you will communicate with me if you experience anything in this course that does not support an inclusive environment. You can also report any incidents you may witness or experience online the Office of Equity, Diversity, and Inclusion on their website. Basic Zoom protocols for this course are as follows:</p> <ul> <li> <p>Mute microphones when not talking</p> </li> <li> <p>Feel free to use the chat to ask questions at any time</p> </li> <li> <p>Ensure that your preferred name and pronouns are included in your     Zoom name</p> </li> <li> <p>Though encouraged, video cameras are optional</p> <ul> <li>If cameras are turned off, please provide a profile picture, this will help me to identify you throughout the course </li> </ul> </li> </ul>"}, {"location": "syllabus/#lab-requirements", "title": "Lab Requirements", "text": "<p>Lab assignments will require Microsoft Visual Studio Code in addition to Git and a GitHub account. Firefox is the official web browser for the class. Use of other software is allowed but not supported (i.e. you are on your own to troubleshoot).</p> <p>Please be sure to have required software installed prior to lab sessions. Reach out if there are any installation issues or concerns before labs.</p>"}, {"location": "syllabus/#lab-assistance", "title": "Lab Assistance", "text": "<p>While the goal in the course is to ease everyone into GIS and writing code, I understand that the process may be intimidating and difficult. Rest assured that your success is my success, and I will try my best in making a learning environment that breaks down these initial barriers. We all have gone through the same struggles learning new technology, and I strongly encourage you get help as often as possible. Steps for troubleshooting technical problems can often be solved by a quick online search or reviewing lab materials for a misstep. The class community discussion forums is another resource for help. Regardless, do not hesitate to reach out to me for help.</p>"}, {"location": "syllabus/#assignments-and-evaluation", "title": "Assignments and Evaluation", "text": "<p>Students will be evaluated based on individual lab assignments, participation, and team based final project. Students are expected to attend all lectures and labs each week.</p> <ul> <li>45% = Group project and assignments</li> <li>45% = Individual class assignments</li> <li>10% = Preparation and participation in class</li> </ul> Task Number of items Points Total Points Total Grade Individual assignments 10 45 450 45% Final Project and Presentation 1 250 250 25% Group Project Assignments 4 50 200 20% Participation 100 10% Grand Total 1000 100%"}, {"location": "syllabus/#participation", "title": "Participation", "text": "<p>While participation is subjective, as long as you are active in the course you should not worry. The following are examples of active participation:   - Participating in class discussions    - Asking questions on Discord or the GitHub discussion board   - Helping other students with their questions   - Coming to office hours   - Overall class attendence</p>"}, {"location": "syllabus/#extra-credit", "title": "Extra Credit", "text": "<p>Extra credit will be given to students that provide exceptional work or contributions throughout the course. Optional assignments are opportunities for extra credit as well.</p>"}, {"location": "syllabus/#course-expectations", "title": "Course Expectations", "text": "<p>UCLA\u2019s Office for Equity, Diversity, and Inclusion provides resources, events, and information about current initiatives at UCLA to support equality for all members of the UCLA community. I hope that you will communicate with me if you experience anything in this course that does not support an inclusive environment, and you can also report any incidents you may witness or experience on campus to the Office of Equity, Diversity, and Inclusion.</p> <p>I expect you to take advantage of the opportunities that this course offers you by being an active and thoughtful participant in all sections and lectures, by coming to lecture and section prepared, and by trying your best on the various elements of the course. I expect you to take ownership of your learning and to reach out to me if you are struggling or have concerns. I expect you to take the opportunity to learn from your peers through activities in lecture and lab section, and I expect you to be respectful and courteous to one another. Finally, I expect you to hold yourself to the highest standards for academic honesty and integrity in your work.</p>"}, {"location": "syllabus/#course-outline", "title": "Course Outline", "text": ""}, {"location": "syllabus/#preparation_1", "title": "Preparation:", "text": "<ul> <li>Fill out the pre-course survey</li> <li>Download and install VS Code</li> <li>Download and install Firefox</li> </ul> <p>If you have any issues with installing the above, please do not hesitate to contact me at albertkun@oarc.ucla.edu.</p> Week Topics 1 Introduction to GIS, data, and ethics 2 Critical Cartography and Civil Society 3 Society, Technology, and Ethics 4 Designing for Civil Society 5 Mentorship and Collaboration  6 Beyond Web Development and Social Change Finals Final presentations"}, {"location": "syllabus/#student-resources-for-support-and-learning", "title": "Student Resources for Support and Learning", "text": ""}, {"location": "syllabus/#providing-feedback", "title": "Providing feedback", "text": "<p>I encourage your feedback at any time throughout the quarter about things that are helping you learn or difficult concepts. Please communicate with me if there are ways that we can improve the course to better support student learning.</p>"}, {"location": "syllabus/#covid-19-accomodations", "title": "COVID-19 Accomodations", "text": "<p>While in-person learning and attendence is strongly encouraged, class lectures will be recorded and provided to all students. To make up for in-person attendence, students are expected to be active on the class discussion board and/or Discord. Feel free to reach out at any point in the quarter if your situation changes and you require further accomodations.</p>"}, {"location": "syllabus/#personal-problems", "title": "Personal Problems", "text": "<p>I understand that sometimes life makes it difficult to focus on schoolwork, especially during COVID-19 times. If you are having a personal problem that affects your participation in this course, please talk to me to create a plan. Please do not wait until the end of the quarter to share any challenges that have negatively impacted your engagement and academic performance.\u00a0The sooner we meet, the more options we will have available\u00a0able to discuss to support your overall academic success.</p>"}, {"location": "syllabus/#academic-accommodations-based-on-a-disability", "title": "Academic Accommodations Based on a Disability", "text": "<p>Students needing academic accommodations based on a disability should contact the Center for Accessible Education (CAE) at (310)825-1501 or in person at Murphy Hall A255. When possible, students should contact the CAE within the first two weeks of the term as reasonable notice is needed to coordinate accommodations. For more information visit www.cae.ucla.edu.</p>"}, {"location": "assignments/", "title": "Index", "text": "", "tags": ["Assignments"]}, {"location": "assignments/#current-assignments", "title": "Current Assignments", "text": "Assignment Type Due Technology and Ethics Reading Monday 7/15 Your ethical views Thinking Cap Monday 7/15 GeoJSONs and Loops Lab Assignment Wednesday 7/17 Pre-lab on Survey Design Pre-lab Wednesday 7/17 Survey &amp; Revision of Memo Group Assignment Wednesday 7/17 Reading on Design Justice Reading Monday 7/22 Your thoughts on Design Justice Thinking Cap Monday 7/22", "tags": ["Assignments"]}, {"location": "assignments/#past-assignments", "title": "Past Assignments", "text": "Assignment Type Due Project Memo Group Assignment Wednesday 7/10 Whose map? Who is empowered and who is disempowered? Weekly Reading Monday 7/8 Functional Events Lab Wednesday 7/10 Pre-lab: Intro to Web Dev Pre-lab Wednesday 6/26 Pre-course Survey Survey Monday 6/24 What are problems with the way we use data and GIS? Thinking Cap Monday 7/1 An Introduction to Critical Cartography [PDF] Weekly Reading Monday 7/1 Map and Portfolio Lab Assignment Wednesday 7/3 Repository and Readme Group Assignment Wednesday 7/3 Intro to Web Maps Pre-lab Wednesday 7/3 Whose map? Who is empowered and who is disempowered? Weekly Reading Monday 7/8 How can we improve Critical Cartography? Thinking Cap Monday 7/8", "tags": ["Assignments"]}, {"location": "assignments/week0/", "title": "Week 0", "text": ""}, {"location": "assignments/week0/#pre-course-survey", "title": "Pre-course survey", "text": "<p>Warning</p> <p>Due before 6/24/2024</p> <ul> <li>Fill out the pre-course survey</li> </ul>"}, {"location": "assignments/week0/#optional-pre-lab-1", "title": "Optional: Pre-lab #1", "text": "<p>You can get a head start by doing the following pre-lab that is due on 6/26:</p> <ol> <li>Sign-up with a GitHub account</li> <li>Download and install Git SCM<sup>1</sup></li> <li>Download and install VS Code</li> <li>Download and install Firefox</li> <li>Read the introduction pages 1, 2, and 3 of Hands On Data Viz (Total reading time 10 - 15 minutes)</li> <li>Read Dealing with files on MDN: </li> </ol> <ul> <li>https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/Dealing_with_files.</li> </ul> <p>Feel free to reach out if you have trouble installing any of the software.</p> <ol> <li> <p>Please be sure to sign-up with a GitHub account before installing Git\u00a0\u21a9</p> </li> </ol>"}, {"location": "assignments/week1/", "title": "Week 1 Assignments List", "text": "<p>Below is the list of all assignments assigned at the start of week 1.</p> <p>Warning</p> <p>Unless specified otherwise, all assignments are due at the beginning of class. Late assignments will be given half credit up until a week.</p> Assignment Type Due Intro to Web Dev Pre-lab Thursday 6/26 ** What are problems with the way we use data and GIS?** Thinking Cap Monday 7/1 An Introduction to Critical Cartography [PDF] Weekly Reading Monday 7/1 Map and Portfolio Lab Assignment Wednesday 7/3 Repository and Readme Group Assignment Wednesday 7/3 Intro to Web Maps Pre-lab Wednesday 7/3", "tags": ["Week 1", "Assignments"]}, {"location": "assignments/week1/group_assignment/", "title": "Group Assignment 1: Repository and Readme", "text": "<p>Group List</p> <p>Find your name and group on the spreadsheet to remember which group you are in: https://docs.google.com/spreadsheets/d/1z8Wi2X4Qu1pp10-ArU6qgb9aINBtdKnSybHFJvTTRwE/edit?usp=sharing</p>"}, {"location": "assignments/week1/group_assignment/#due-73", "title": "Due 7/3", "text": "<ol> <li> <p>As a group check-in with me before 7/3 by making an appointment here: https://calendly.com/aa191a/office-hours or emailing me directly (albertkun@oarc.ucla.edu). </p> </li> <li> <p>Have one person create a new repo for the group and invite everyone as collaborators.</p> </li> </ol> <ul> <li>Guide on how to create a new repo and invite</li> </ul> <ol> <li>Add a <code>readme.md</code> to the repository that briefly describes the following in 1-2 sentences:</li> </ol> <ul> <li> <p>What social problem is being addressed?</p> </li> <li> <p>Who is being empowered by your mapplication?</p> </li> <li> <p>What technical and ethical problems could there be in developing this tool?</p> </li> </ul> <p>Markdown tip</p> <p>Markdown is text formatting that is used all over and commonly encountered on GitHub too! Since is your group\u2019s introduction to the world, make sure you use Markdown formatting to style your content properly.  </p> <ol> <li> <p>Post your group members and repository on the discussion board:</p> <ul> <li>https://github.com/albertkun/24SU-ASIAAM-191A/discussions/27</li> </ul> </li> </ol>"}, {"location": "assignments/week1/group_assignment/#extra-credit", "title": "Extra Credit", "text": "<p>Reach out to a non-profit organization that your crowd-sourced mapping application could help support and mention them in the write-up.</p>"}, {"location": "assignments/week1/lab_assignment/", "title": "Lab Assignment #1 - Map and Portfolio", "text": ""}, {"location": "assignments/week1/lab_assignment/#due-73", "title": "Due 7/3", "text": "<p>Time to put your skills to the test and create a home page for the individual maps that you will be making this quarter. Describe some of your interests and include a map with some markers. This is your portfolio, so feel free toadd anything. If you made multiple HTML pages, please link them all to the <code>index.html</code> using the <code>&lt;a href=\"\"&gt;&lt;/a&gt;</code> tag&gt;.</p> <p>Your portfolio must contain the following:</p> <ul> <li>A <code>&lt;h1&gt;</code> tag for your title</li> <li>Add at least 2-3 markers to the map with a common theme, for example organizations you\u2019ve volunteered for or places you\u2019ve traveled.</li> <li>A <code>&lt;h2&gt;</code> or <code>&lt;h3&gt;</code> tag to create a title for your map. </li> <li>A <code>&lt;p&gt;</code> tag for a paragraph describing yourself and your goals as a critical digital map maker.</li> <li>Style CSS by changing the background color, font, or anything else.</li> <li>Use an ordered list <code>&lt;ol&gt;</code> tag and an unordered list <code>&lt;ul&gt;</code> tag to list things.</li> <li>Include an <code>&lt;img&gt;</code> tag with a photo of yourself or an avatar. Feel free to add other images too to give some flavor to your page, like food or desserts.</li> <li>Use the <code>&lt;a&gt;</code> tag to add a link to 2 other web pages.</li> <li>Commit your changes</li> <li>Set up GitHub pages for your repo</li> </ul>"}, {"location": "assignments/week1/lab_assignment/#extra-credit-any-of-these", "title": "Extra Credit: (any of these)", "text": "<ul> <li>Add another link to your own completely different HTML page not <code>index.html</code>. (Be sure to link it to your <code>index.html</code> and describe what you are showing)</li> <li>Add another use of Maplibre </li> <li>Check out the Extra or Maplibre documentation and try something there.</li> </ul>"}, {"location": "assignments/week1/lab_assignment/#submission", "title": "Submission:", "text": "<ul> <li>Commit and publish your file to your repo\u2019s GitHub pages</li> <li> <p>Find your <code>index.html</code> in the <code>week1</code> folder and copy the URL. It should look something like this:</p> </li> <li> <p>https://albertkun.github.io/24su-asiaam-191a-labs/week1/index.html</p> </li> <li> <p>Paste your link as a comment in the Discussion forum for Lab Assignment #1</p> </li> </ul>"}, {"location": "assignments/week1/lab_assignment/#extra-resources", "title": "Extra Resources", "text": ""}, {"location": "assignments/week1/lab_assignment/#html", "title": "HTML", "text": "<ul> <li> <p>Short MDN HTML Syntax (good recap):  https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started</p> </li> <li> <p>Long overview and explanation of HTML: https://geobgu.xyz/web-mapping2/html.html</p> </li> </ul>"}, {"location": "assignments/week1/lab_assignment/#css", "title": "CSS", "text": "<ul> <li>Learn Layout:</li> <li>https://learnlayout.com</li> </ul>"}, {"location": "assignments/week1/lab_assignment/#css-grid", "title": "CSS GRID", "text": "<ul> <li>CSS Grid Garden (game to familiarize yourself with CSS grid):</li> <li> <p>https://cssgridgarden.com/</p> </li> <li> <p>CSS Tricks:</p> </li> <li>https://css-tricks.com/snippets/css/complete-guide-grid/</li> </ul>"}, {"location": "assignments/week1/lab_assignment/#javascript", "title": "JavaScript", "text": "<ul> <li>JavaScript for Cats:</li> <li>http://jsforcats.com/</li> </ul>"}, {"location": "assignments/week1/prelab/", "title": "Pre-Lab #1", "text": "<p>Info</p> <p>Pre-labs consist of the following:</p>"}, {"location": "assignments/week1/prelab/#1-checking-if-your-applications-andor-data-is-ready-for-the-labs", "title": "1. Checking if your applications and/or data is ready for the labs.", "text": ""}, {"location": "assignments/week1/prelab/#2-short-readings-that-provide-additional-technical-information-or-more-background", "title": "2. Short readings that provide additional technical information or more background.", "text": ""}, {"location": "assignments/week1/prelab/#due-before-lab-1-on-626", "title": "Due before Lab #1 on 6/26", "text": "<p>Please have this completed before the lab:</p> <ol> <li>Sign-up with a GitHub account</li> <li>Download and install Git SCM</li> <li>Download and install VS Code</li> <li>Download and install Firefox</li> <li>Read the introduction pages 1, 2, and 3 of Hands On Data Viz (Total reading time 10 - 15 minutes)</li> <li>Read Dealing with files on MDN: </li> </ol> <ul> <li>https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/Dealing_with_files.</li> </ul>"}, {"location": "assignments/week1/prelab/#additional-help", "title": "Additional Help", "text": "<p>Here are guides to help with signing-up with GitHub and installing GitSCM:</p> <ol> <li>How to sign-up for GitHub</li> <li>How to install GitSCM</li> </ol> <p>If you have any further trouble with these steps, be sure reach out to me albertkun@ucla.edu before the lab session.</p>"}, {"location": "assignments/week1/prelab/#optional-technical-readings", "title": "Optional Technical Readings", "text": "<ul> <li>HTML Basics - https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics</li> <li>CSS Basics - https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics</li> <li>JavaScript Basics - https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics</li> </ul>"}, {"location": "assignments/week1/reading/", "title": "Weekly Reading #1", "text": "<p>J. W. Crampton and J. Krygier (2010) \u201cAn Introduction to Critical Cartography\u201d. https://www.researchgate.net/publication/241435510_An_Introduction_to_Critical_Cartography</p> <p>This 15-page article summarizes critical cartography by introducing ethics and modern mapmaking technologies. It should take around 10 - 20 minutes to finish reading.</p> <p>Download PDF \ud83d\udce5 </p>"}, {"location": "assignments/week1/thinking_cap/", "title": "Thinking cap #1", "text": "<p>Prompt</p>"}, {"location": "assignments/week1/thinking_cap/#what-do-you-think-are-problems-with-the-way-we-use-data-and-gis", "title": "What do you think are problems with the way we use data and GIS?", "text": ""}, {"location": "assignments/week1/thinking_cap/#part-1-respond", "title": "Part 1 - Respond", "text": "<p>Respond to the above prompt on GitHub</p> <ul> <li> <p>3 to 5 sentences minimum</p> </li> <li> <p>Feel free to include links and images</p> </li> </ul> <p>For more info see how to submit thinking caps, part 1.</p> <p>Reminder!</p> <p>To be eligible for extra credit, you must complete this part one day before the due date (e.g. 6/30 at 3pm PST).</p>"}, {"location": "assignments/week1/thinking_cap/#part-2-reply", "title": "Part 2 - Reply", "text": "<p>Comment on two other student\u2019s replies.</p> <p>Leave a reply on the posts of two other students, reflecting on what you think of their discussion post. You can ask a thoughtful follow-up question, express similar experiences, and share resources.</p> <p>Info</p> <p>Try to respond to students posts with no replies.</p> <p>For more details see how to submit thinking caps, part 2</p>"}, {"location": "assignments/week2/", "title": "Week 2 New Assignments List", "text": "<p>Below is the list of all assignments assigned at the start of week 2.</p> <p>Warning</p> <p>Unless specified otherwise, all assignments are due at the beginning of class. Late assignments will be given half credit up until a week.</p> Assignment Type Due Intro to Web Maps Pre-lab Wednesday 7/3 Whose map? Who is empowered and who is disempowered? Weekly Reading Monday 7/8 How can we improve Critical Cartography? Thinking Cap Monday 7/8 Lab Assignment #2 Lab Wednesday 7/10 Project Memo Group Assignment Wednesday 7/10", "tags": ["Week 2", "Assignments"]}, {"location": "assignments/week2/group_assignment/", "title": "Group Assignment #2: Memo", "text": ""}, {"location": "assignments/week2/group_assignment/#due-thursday-710", "title": "Due Thursday 7/10", "text": "<p>Prepare a short memo (no more than two pages) for your project either using Google Docs or Microsoft Word. This document will be exchanged with other groups and form the basis of our survey testing. When finished, please upload the pdf to your repository.</p>"}, {"location": "assignments/week2/group_assignment/#requirements", "title": "Requirements", "text": "<ul> <li>Background on the social issue/campaign being addressed, please cite sources where necessary</li> <li>What the project hopes to achieve</li> <li>Description on which communities will be empowered</li> <li>At least 2 user stories from the perspective of community members</li> <li>2-3 sample questions to be included on the survey</li> <li>Future plans on how the project could be used in the future to give ownership of the tool to the community</li> </ul>"}, {"location": "assignments/week2/group_assignment/#examples", "title": "Examples", "text": ""}, {"location": "assignments/week2/group_assignment/#blank-template", "title": "Blank template", "text": "<ul> <li>https://docs.google.com/document/d/1OWUUxebPNsqw4K97gznvTkGLEr6QDAbXWqX2BGvernI | Click here to copy</li> </ul>"}, {"location": "assignments/week2/group_assignment/#top-samples-from-previous-years", "title": "Top Samples from previous years", "text": "<ul> <li>Community-based project: https://docs.google.com/document/d/1luEGoedbzhedIfqYMA7nWkhUxx3iNjDuX2HC2Sblv8w</li> <li>Community-based project: https://tinyurl.com/2s47hfwe</li> <li>Student-based project: https://docs.google.com/document/d/1SDURCaoLo6TZAHLAzLEsBFkwoq1QmT54mR6YNdFi1fw</li> <li>Student-based project: https://tinyurl.com/36rt9mm3</li> </ul>"}, {"location": "assignments/week2/group_assignment/#submission", "title": "Submission", "text": "<p>Reply discussion post link for Group Assignment #2</p>"}, {"location": "assignments/week2/lab_assignment/", "title": "\ud83d\udcddLab Assignment #2 - Functional events", "text": ""}, {"location": "assignments/week2/lab_assignment/#due-710", "title": "Due 7/10", "text": "<p>In this lab, we learned how JavaScript functions that can be used for automating tasks. Functions also form the basis of the JavaScript programming we will be doing. Your assignment this week is to create a map for your portfolio with relevant points and have buttons that interact with the map.</p> <p>The requirements are:</p> <ul> <li>Add at least 3 markers to the map using a JavaScript function (these markers can be same as lab assignment #2)</li> <li>Use the <code>&lt;button&gt;</code> element to execute a JavaScript function to interact with your map </li> <li>Add an Event Listener that executes the JavaScript function to interact with your map</li> <li>Markers should have popups that describe what the point is.</li> </ul>"}, {"location": "assignments/week2/lab_assignment/#extra-credit", "title": "Extra Credit", "text": "<ul> <li>Use something else like images or text to move the map.</li> <li>Style the buttons or markers</li> <li>Try something new with the MapLibre API.</li> </ul>"}, {"location": "assignments/week2/lab_assignment/#submission", "title": "Submission", "text": "<ul> <li> <p>Commit your changes to GitHub</p> </li> <li> <p>Commit and publish your file to GitHub pages.</p> </li> <li> <p>Find your <code>index.html</code> in the <code>week2</code> in GitHub Pages and copy the URL. It should look something like this:</p> </li> <li> <p>https://albertkun.github.io/24SU-ASIAAM-191A-Assignments/week2/index.html</p> </li> <li> <p>Paste your link as a comment in the Discussion forum for Lab Assignment #2:</p> </li> <li>https://github.com/albertkun/24SU-ASIAAM-191A/discussions/37</li> </ul>"}, {"location": "assignments/week2/prelab/", "title": "Prelab #2", "text": ""}, {"location": "assignments/week2/prelab/#due-73", "title": "Due 7/3", "text": "<p>These readings introduce \u201cWeb mapping\u201d technologies and will be helpful for understanding what Leaflet and MapLibre is.</p> <ol> <li>Read https://geobgu.xyz/web-mapping2/index.html#what-is-web-mapping only sections 0.1 to 0.3</li> <li>Read https://geobgu.xyz/web-mapping2/leaflet.html#introduction-5 only sections 6.1 to 6.4</li> </ol> <p>Optional more technical reading on JavaScript - https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript</p>"}, {"location": "assignments/week2/reading/", "title": "Weekly reading", "text": "<p>\u231b Reading time \u231b</p> <ul> <li>15 - 25 minutes</li> </ul> <p>This article looks how participatory mapping in particular affects those who are mapped and unmapped, it serves as practical grounding to the concepts of critical cartography discussed this week.</p> <ul> <li>Chambers, R. (2006) Participatory Mapping and Geographic Information Systems: Whose map? Who is empowered and who is disempowered? Who gains and who loses?</li> </ul>"}, {"location": "assignments/week2/thinking_cap/", "title": "Thinking cap #2", "text": "<p>Prompt</p> <p>Reflect on the benefits and limitations of participatory mapping/critical cartography. How might we increase the participation of marginalized communities in the mapping process? How about academic researchers? </p> <p>Reviewing the readings, lecture, and discussion notes will be helpful in formulating a response.</p>"}, {"location": "assignments/week2/thinking_cap/#how-can-participatory-mapping-and-critical-cartography-be-improved", "title": "How can participatory mapping and critical cartography be improved?", "text": ""}, {"location": "assignments/week2/thinking_cap/#submission", "title": "Submission", "text": "<p>Post your thinking cap response and reply to others in this thread here:</p> <ul> <li>Thinking Cap #2 Submission thread</li> </ul> <p>Reminders</p> <ul> <li>Extra credit is only available if you submit 1 day before the deadline (i.e. Sunday 7/8) at 2pm.</li> <li>Be sure to read the weekly reading reading before formulating a response!</li> </ul> <p>!!!! question \u201cRemember!\u201d     Refer to this documentation if you need a reminder on how to complete the assignment.</p>"}, {"location": "assignments/week3/group_assignment/", "title": "Group Assignment 3 - Survey &amp; Revision of Memo", "text": "", "tags": ["Group Assignment 3"]}, {"location": "assignments/week3/group_assignment/#due-wednesday-717", "title": "Due Wednesday 7/17", "text": "<p>Design a survey that will focus on the community voices for your project. As part of this assignment, your group must also check-in with me by the end of week 4.</p>", "tags": ["Group Assignment 3"]}, {"location": "assignments/week3/group_assignment/#resouces", "title": "Resouces", "text": "<p>The pre-lab on survey design will be helpful to reference:</p> <ul> <li>Prelab</li> </ul>", "tags": ["Group Assignment 3"]}, {"location": "assignments/week3/group_assignment/#submission", "title": "Submission", "text": "", "tags": ["Group Assignment 3"]}, {"location": "assignments/week3/group_assignment/#survey", "title": "Survey", "text": "<p>Submit your survey as one group using this Google Form:</p> <ul> <li>https://forms.gle/Cdr29ZmYt3qXnvRMA</li> </ul> <p>Submit your revised memo on the following thread or via email: https://github.com/albertkun/24SU-ASIAAM-191A/discussions/43</p> <p>Google Form sharing settings</p> <p>Make sure your Google form is set to anyone with the link can view. If you do not do this, I will not be able to see your form. You can change this setting by clicking on the Send button in the top right corner of your Google Form: https://support.google.com/docs/answer/160166?visit_id=638191971424789734-763542883&amp;p=forms_settings&amp;rd=1#.</p>", "tags": ["Group Assignment 3"]}, {"location": "assignments/week3/lab_assignment/", "title": "\ud83d\udcddLab Assignment #3 - GeoJSONs and Loops", "text": ""}, {"location": "assignments/week3/lab_assignment/#due-717-wednesday", "title": "Due 7/17 Wednesday", "text": "<p>In this week\u2019s lab, we learned how to loop through data and connect to an API. Your task is to create a mini-version of the final group project for the class that takes in data and maps it.</p> <p>The requirements are:</p> <ul> <li>Create your own geoJSON file using geojson.io</li> <li>Add your geoJSON data to your map using a <code>fetch-then</code> request</li> <li>Use any type of for-loop within a JavaScript function to add your geoJSON features to your map.</li> </ul>"}, {"location": "assignments/week3/lab_assignment/#extra-credit", "title": "Extra credit", "text": "<ul> <li>Populate your HTML with data from the geojson</li> <li>Use circle markers or custom icons for your geoJSON features.</li> <li>Style your map features with a color or size based on a property in your geoJSON file.</li> <li>Create a new page for your portfolio for this map</li> </ul>"}, {"location": "assignments/week3/lab_assignment/#submission", "title": "Submission", "text": "<ul> <li>Commit your changes to GitHub</li> <li>Find your <code>index.html</code> in the <code>week3</code> folder and copy the URL. It should look something like this:</li> <li>https://albertkun.github.io/24SU-ASIAAM-191A-Assignments/week3/index.html</li> <li>Paste your link as a comment in the Discussion forum for Lab Assignment #4:</li> <li>https://github.com/albertkun/24SU-ASIAAM-191A/discussions/42</li> </ul>"}, {"location": "assignments/week3/prelab/", "title": "Survey Design (pre-lab for next week)", "text": ""}, {"location": "assignments/week3/prelab/#due-wednesday-717", "title": "Due Wednesday 7/17", "text": "<p>\u231b Reading time \u231b</p> <ul> <li>15 - 25 minutes</li> </ul> <p>As we begin to work with Google Forms on week 4, the first reading is helpful for understanding survey data questions. The second reading demonstrates important considerations in designing any participatory mapping activity. </p> <p>The third and optional reading is for those who have not used Google Forms before. </p>"}, {"location": "assignments/week3/prelab/#readings", "title": "Readings", "text": "<ul> <li> <p>Harvard tip sheet for designing questions: https://psr.iq.harvard.edu/files/psr/files/PSRQuestionnaireTipSheet_0.pdf [5 mins]</p> </li> <li> <p>Shortened version of Participatory Asset Mapping [15 mins]</p> </li> </ul>"}, {"location": "assignments/week3/prelab/#optional", "title": "Optional", "text": "<p>Know about Google Forms?</p> <p>Skip this if you are familiar with the basics of creating a Google Form.</p> <ul> <li>Google\u2019s 3 steps of getting started with Google Forms [3 mins]</li> </ul>"}, {"location": "assignments/week3/reading/", "title": "Weekly reading - Technology and Ethics", "text": "<p>\u231b Reading time \u231b</p> <ul> <li>20 - 30 minutes</li> </ul> <p>The readings this week are designed to show development (and lack) of ethics from the past and to the present. Jeremmy Krampton\u2019s paper shows a past view of GIS and ethics in 1995, while Paris Marx\u2019s article describes the lack of a systematic approach to view social problems with technology in \u201cDon\u2019t Blame Social Media. Blame Capitalism.\u201d</p> <ul> <li>Crampton, J. (1995) The Ethics of GIS. [10-15 minutes]</li> <li>Marx, P. (2020) Don\u2019t Blame Social Media. Blame Capitalism. [10-15 minutes]</li> </ul>"}, {"location": "assignments/week3/thinking_cap/", "title": "Thinking cap #3", "text": ""}, {"location": "assignments/week3/thinking_cap/#due-715", "title": "Due 7/15", "text": "<p>Prompt</p> <p>Reflect on the relationship between science, technology, and ethics covered on the lecture and reading.</p> <p>This weeks readings will be helpful in formlating a response.</p>"}, {"location": "assignments/week3/thinking_cap/#what-are-your-ethical-views-when-it-comes-to-society-and-technology-how-do-your-ethics-empower-civil-society", "title": "What are your ethical views when it comes to society and technology? How do your ethics empower civil society?", "text": ""}, {"location": "assignments/week3/thinking_cap/#submission", "title": "Submission", "text": "<p>Post your thinking cap response and reply to others in this thread here:</p> <ul> <li>Thinking Cap #3 submission thread</li> </ul> <p>Reminders</p> <ul> <li>Extra credit is only available if you submit 1 day before the deadline (i.e. Monday 5/1) at 2pm.</li> <li>Be sure to read the weekly readings reading before formulating a response!</li> </ul> <p>!!!! question \u201cRemember!\u201d     Refer to this documentation if you need a reminder on how to complete the assignment.</p>"}, {"location": "assignments/week4/prelab/", "title": "Survey Design", "text": ""}, {"location": "assignments/week4/prelab/#due-wednesday-717", "title": "Due Wednesday 7/17", "text": "<p>\u231b Reading time \u231b</p> <ul> <li>15 - 25 minutes</li> </ul> <p>As we begin to work with Google Forms on week 4, the first reading is helpful for understanding survey data questions. The second reading demonstrates important considerations in designing any participatory mapping activity. </p> <p>The third and optional reading is for those who have not used Google Forms before. </p>"}, {"location": "assignments/week4/prelab/#readings", "title": "Readings", "text": "<ul> <li> <p>Harvard tip sheet for designing questions: https://psr.iq.harvard.edu/files/psr/files/PSRQuestionnaireTipSheet_0.pdf [5 mins]</p> </li> <li> <p>Shortened version of Participatory Asset Mapping [15 mins]</p> </li> </ul>"}, {"location": "assignments/week4/prelab/#optional", "title": "Optional", "text": "<p>Know about Google Forms?</p> <p>Skip this if you are familiar with the basics of creating a Google Form.</p> <ul> <li>Google\u2019s 3 steps of getting started with Google Forms [3 mins]</li> </ul>"}, {"location": "assignments/week4/reading/", "title": "Weekly reading - Data Justice", "text": "<p>\u231b Reading time \u231b</p> <ul> <li>30 - 45 minutes</li> </ul> <p>This week\u2019s reading is about Design Justice that connects intersectionality with design as an ethically grounded framework.</p> <ul> <li>Costanza-Chock, S. (2018) Design Justice. [30-45 minutes]</li> </ul>"}, {"location": "assignments/week4/thinking_cap/", "title": "Thinking cap #5", "text": "<p>Prompt</p> <p>Read this week\u2019s reading on Design Justice and reflect on how design justice is a way to connect justice to design on a practical level.</p>"}, {"location": "assignments/week4/thinking_cap/#what-do-you-think-about-design-justice-would-open-source-projects-benefit-from-considering-it-how-might-you-apply-design-justice-in-your-designs-going-forward", "title": "What do you think about design justice? Would open-source projects benefit from considering it? How might you apply Design Justice in your designs going forward?", "text": ""}, {"location": "assignments/week4/thinking_cap/#submission", "title": "Submission", "text": "<p>Post your thinking cap response and reply to others in this thread here:</p> <ul> <li>Thinking Cap #5 submission thread</li> </ul> <p>Reminders</p> <ul> <li>Extra credit is only available if you submit 1 day before the deadline (i.e. Monday 5/16) at 2pm.</li> </ul> <p>!!!! question \u201cRemember!\u201d     Refer to this documentation if you need a reminder on how to complete the assignment.</p>"}, {"location": "help/", "title": "Help", "text": "<p>If you run into any issues, please check the guides below first. Then feel free to ask on Discord  or the GitHub discussion forums .</p> <p>You can always contact me below if you have questions.</p>"}, {"location": "help/#instructor-contact", "title": "Instructor Contact", "text": "<p>Albert S. Kochaphum (albertk@asianam.ucla.edu)</p>"}, {"location": "help/#office-hours", "title": "Office Hours", "text": "<p>Monday and Wednesdays 5:15pm \u2013 6pm online by appointment below:</p> <ul> <li>https://calendly.com/aa191a/office-hours</li> </ul>"}, {"location": "help/#list-of-class-how-to-guides", "title": "List of class How-To guides", "text": "<p>Below are step-by-step guides on getting started with the course. </p>"}, {"location": "help/#course-related", "title": "Course Related", "text": "<ol> <li> <p>Posting a Thinking Cap</p> </li> <li> <p>Submit Lab Assignments</p> </li> </ol>"}, {"location": "help/#git-related", "title": "Git Related", "text": "<ol> <li> <p>GitHub Sign-Up</p> </li> <li> <p> Installing Git SCM</p> </li> <li> <p> Creating a Repository in GitHub</p> </li> <li> <p>Git Clone in VS Code</p> </li> <li> <p>Committing code to GitHub in VS Code</p> </li> </ol>"}, {"location": "help/final_project_examples/", "title": "A+ Final Projects from 2022", "text": "<p>https://lindseymardona.github.io/group-8/final/index.html</p> <p>https://bittertang.github.io/UCLAsianStories/index.html</p>"}, {"location": "help/final_project_examples/#other-notable-examples", "title": "Other notable examples", "text": "<ul> <li>https://stefuntran.github.io/AAPI-Discrimination/</li> <li>https://kaittli.github.io/aanhpi-healthcare/index.html</li> </ul>"}, {"location": "help/git_cloning/", "title": "Guide for cloning", "text": "<ol> <li> <p>Launch VS Code from Launcher (Mac) or Start Menu (PC)</p> </li> <li> <p>On the <code>Welcome</code> screen click <code>Clone Repository</code>:</p> </li> </ol> <p></p> <ol> <li>Click <code>Clone from GitHub</code></li> </ol> <p></p> <ol> <li>Allow GitHub to sign in Accept the following dialogue box:</li> </ol> <p></p> <ol> <li>Click <code>Continue</code> in the web browser that opens up:</li> </ol> <p></p> <ol> <li>Click <code>Choose Application</code></li> </ol> <p></p> <ol> <li>Click Open Link:</li> </ol> <p></p> <ol> <li>Click <code>Open</code>:</li> </ol> <p></p> <ol> <li>Search for the class repository by typing <code>24SU-191A-AsianAm</code> and     then select the repository: albertkun/24SU-ASIAAM-191A</li> </ol> <p></p> <ol> <li>Select a folder to clone into:</li> </ol> <p></p> <ol> <li>Click <code>Open</code> in your locally cloned repo:</li> </ol> <p></p> <ol> <li>You can see the files by clicking on the Explorer to the right:</li> </ol> <p></p> <ol> <li>Now you are ready for all labs!</li> </ol>"}, {"location": "help/git_commit/", "title": "Guide for using Git Commit in VS Code", "text": ""}, {"location": "help/git_commit/#requirements", "title": "Requirements:", "text": "<ul> <li>Git Clone completed</li> </ul> <p>This guide will walk you through how to push to your lab assignment repo after you have finished your assignments.</p> <ol> <li> <p>Make sure the explorer bar is active</p> </li> <li> <p>Make sure you have changes to commit, for example you should have modified a file (M), created a file (U), or deleted a file (D). </p> </li> <li>Click on \u201cVersion Control\u201d in the Activity Bar </li> <li>Add a commit message that is meaningful </li> <li>Click the checkmark </li> <li>Click the expanded options menu </li> <li>Choose \u201cPush\u201d to push to GitHub </li> <li>Go to your GitHub repository and check to see if your repository has updated. </li> </ol>"}, {"location": "help/git_creating/", "title": "Guide for creating a repository and inviting group members", "text": "<p>This guide is designed to show you how to create a repository and add group members.</p> <ol> <li>After logging in to GitHub click the plus icon and choose <code>New     repository</code>:</li> </ol> <p></p> <ol> <li>Input your group name:</li> </ol> <p></p> <ol> <li>Click <code>Create Repository</code>:</li> </ol> <p></p>"}, {"location": "help/git_creating/#adding-your-partners-as-collaborators", "title": "Adding your partners as collaborators", "text": "<ol> <li>Go to settings:</li> </ol> <ol> <li>Click manage access:</li> </ol> <ol> <li>Click invite a collaborator:</li> </ol> <ol> <li>Search for your teammate\u2019s email or username:</li> </ol> <ol> <li>Click:</li> </ol> <ol> <li>And add:</li> </ol> <ol> <li>Remember to clone the repository locally and start collaborating!</li> </ol>"}, {"location": "help/git_creating/#warnings-about-merge-conflicts", "title": "Warnings about \u201cMerge Conflicts\u201d", "text": "<ol> <li> <p>If you do not use <code>git pull</code> to update periodically update repository and/or push     your changes, you may run into <code>merge conflicts</code> when two files are being edited at the same time.</p> </li> <li> <p>If you do run into a <code>merge conflict</code>, someone should merge the     conflicting files. Please or check out this article on merge conflicts:</p> </li> </ol> <p>https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/addressing-merge-conflicts</p> <ol> <li>We will be covering merge conflicts in detail a little later.</li> </ol>"}, {"location": "help/github_sign_up/", "title": "Guide for signing up to GitHub", "text": "<ol> <li>Go to GitHub.com</li> </ol> <ol> <li>Click on Sign-up</li> </ol> <ol> <li>Create an account:</li> </ol> <ol> <li>Check your email to verify:</li> </ol> <ol> <li>Remember your username and email! It will be necessary for setting up GitSCM!</li> </ol>"}, {"location": "help/gitscm/", "title": "Guide for installing Git SCM", "text": "<ol> <li> <p>Go to: https://git-scm.com/</p> </li> <li> <p>Download and install, based on your operating system below:</p> </li> </ol> PCMac <ol> <li>Run the installer and go through the installation wizard.</li> </ol> <p></p> <ol> <li>Launch the command prompt when done by pressing the <code>Windows</code> key and typing in <code>cmd</code></li> <li>In the command prompt run the command to test your installation:</li> </ol> <pre><code>git --version\n</code></pre> <p>This tests the installation: </p> <p></p> <ul> <li>If it is working, move to step 6</li> <li>If it is not working, send an email or post on the GitHub discussion board.</li> </ul> <p>Note</p> <p>Make sure you have Homebrew installed. If you can run the command \u2018brew\u2019 then you are good to go.</p> <ol> <li> <p>Open launcher and search \u2018Terminal\u2019:  </p> </li> <li> <p>In the terminal then type <code>brew install git</code>:  </p> </li> <li> <p>In the terminal run the command to test your installation:</p> </li> </ol> <pre><code>git --version\n</code></pre> <p>This tests the installation:        </p> <pre><code>  - If it is working, move to **step 6**\n  - If it is not working, send an email or post on the GitHub discussion board.\n</code></pre> <ol> <li>Set our identity to our GitHub username for Git by running:  </li> </ol> <pre><code>git config --global user.name \"YOUR_GITHUB_USERNAME\"\n</code></pre> <p>Important</p> <p>Remember to change <code>\"YOUR_GITHUB_USERNAME\"</code> to your actual GitHub Username and include the double quotes <code>\" \"</code></p> <ol> <li>Now set your email to the email you signed up with GitHub by running :</li> </ol> <pre><code>git config --global user.email YOUR@EMAIL.COM\n</code></pre> <p>Important</p> <p>Remember to change <code>YOUR@EMAIL.COM</code> to your actual GitHub email</p> <ol> <li> <p>Once finished, run the following to check your email and username: <code>git config --list</code></p> </li> <li> <p>If you had any issues, please check this documentation for more     details or reach out for help.</p> </li> <li> <p>Now you are ready to clone a repository in VS Code!</p> </li> </ol>"}, {"location": "help/live_share/", "title": "Quickstart for Live Share", "text": "<p>Make sure you have installed the Live Share extension by going to the following link and clicking on \u201cInstall\u201d: </p> <p>https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare</p> <p></p> <p>You can read the documentation to learn more about Live Share and what it does too:</p> <p>https://docs.microsoft.com/en-us/visualstudio/liveshare/</p> <p>After installing Live Share, you can join a session with these steps:</p>"}, {"location": "help/live_share/#1-click-on-the-join-url", "title": "1. Click on the Join url", "text": "<p>Click the session URL the \u201chost\u201d sent you, which will open it up in a browser. When prompted, allow your browser to launch VS Code</p>"}, {"location": "help/live_share/#2-sign-in-to-github", "title": "2. Sign in to GitHub", "text": "<p>Tip: This will only need be done once.</p> <p>Click on the <code>Live Share</code> status bar item or press <code>Ctrl+Shift+P</code> / <code>Cmd+Shift+P</code> and select the <code>Live Share: Sign In With Browser</code> command. </p>"}, {"location": "help/live_share/#3-working-the-session", "title": "3. Working the session", "text": "<p>After you join, you\u2019ll be immediately presented with the file that the \u201chost\u201d has open, and can see their cursor and any edits they make.</p>"}, {"location": "help/live_share/#4-snapping-windows", "title": "4. Snapping windows", "text": "<p>To make our editing session more efficient, it is highly recommended that after you join the live coding session, that you open a new window for VS Code and snap one window to the left and another to the right.</p> <p>The ideal layout should look something like the following:</p> <p></p> <ul> <li> <p>How to Snap windows on Mac</p> </li> <li> <p>How to Snap windows on PC</p> </li> </ul>"}, {"location": "help/live_share/#optional-host-your-own-session", "title": "Optional: Host your own session", "text": "<p>Click the \u201clive share\u201d button to immediately start sharing your coding session.  An invitation link will automatically be copied to your clip board, you can invite anyone to join your session by sharing it. </p> <p>You can join your own collaboration session by clicking the link yourself. open it in any browser to join your session.</p>"}, {"location": "help/submit/", "title": "How to submit Lab assignments", "text": "<p>Pre-requisites</p> <p> You have committed your code to GitHub</p> <p> You enabled GitHub pages</p> <p>Please refer to lab #1 if you have not done these steps yet.</p>"}, {"location": "help/submit/#go-to-the-discussion-board", "title": "Go to the Discussion board", "text": "<p>https://github.com/albertkun/24SU-ASIAAM-191A/discussions/</p>"}, {"location": "help/submit/#click-on-the-assignment-you-are-submitting", "title": "Click on the assignment you are submitting", "text": ""}, {"location": "help/submit/#paste-the-link-as-a-comment-and-reply", "title": "Paste the link as a comment and reply", "text": ""}, {"location": "help/thinking_caps/", "title": "How to Submit a Thinking Cap Discussion", "text": ""}, {"location": "help/thinking_caps/#part-1-posting-your-own-discussion", "title": "Part 1: Posting your own discussion", "text": "<p>Warning</p> <p>Due at 2pm PST on Mondays, but to be eligible for extra credit you must submit at 2pm PST on Sundays.</p> <ol> <li>Make sure you are signed into your GitHub account. </li> <li>Go to the course website</li> <li>Click on \u201cDiscussions\u201d </li> <li>Click on the \u201cThinking Cap\u201d you are posting for </li> <li>Scroll down to find the comment box: </li> <li>Respond to the prompt for the week. </li> <li>Click Comment to submit: </li> <li>The first part of assignment is now complete!</li> </ol>"}, {"location": "help/thinking_caps/#part-2-responding-to-discussions", "title": "Part 2: Responding to discussions", "text": "<ol> <li> <p>Go to the discussion page on the GitHub repository</p> </li> <li> <p>Try to look for student posts with no replies. </p> </li> <li> <p>Type a thoughtful reply and click Comment .</p> </li> <li> <p>Repeat Steps #8 - #10 for another student.</p> </li> <li> <p>Congratulations on finishing the assignment!</p> </li> </ol>"}, {"location": "labs/", "title": "Summary", "text": "Lab Title Topic #1 GITting down with labs and code Git, HTML, CSS, JS #1.5 MapLibRevisiting Portfolios HTML, CSS, JS, MapLibreGL #2 JavaScript FUNctions Functions, Variables, Methods, Events #3 For-hoops and Geo-J-cieON Events, Functions, Methods <p>Remember!</p> <p>Unless specified otherwise, all assignments are due at the beginning of class. Late assignments will be given half credit up until a week.</p>"}, {"location": "labs/week1/", "title": "GITting down with labs and code", "text": "", "tags": ["Lab 1"]}, {"location": "labs/week1/#objectives", "title": "Objectives", "text": "<p>Goals</p> <ul> <li>Create a basic webpage</li> <li>Add a map with markers</li> <li>Publish your page onto GitHub pages</li> </ul> <p>Reminder</p> <p>The pre-lab must be completed before attempting this lab.</p>", "tags": ["Lab 1"]}, {"location": "labs/week1/#lab-outline", "title": "Lab outline", "text": "<ol> <li>Using VS Code</li> <li>Writing HTML</li> <li>Writing CSS</li> <li>Adding a Map</li> <li>Publishing with GitHub Pages</li> <li>Final Lab Code</li> </ol> <p>This lab will walk you through the process of creating a static web page in HTML with some additional style elements using CSS. Then you will be tasked to host it using GitHub pages.</p> <p>Note: I highly recommend checking out the MapLibreGL documentation. Looking at any documentation before choosing any software is important, because badly documented libraries can make tools difficult to use. </p>", "tags": ["Lab 1"]}, {"location": "labs/week1/0/", "title": "Let\u2019s get VS Coding!", "text": "<p>Go to https://www.github.com  and make sure you are logged in.</p> <p>Create a new repository by clicking on the  button next to your profile picture:</p> <p></p> <p>Click New repository:</p> <p></p> <p>Give it a name that indicates these will be the assignments for the class:</p> <p></p> <p>Info</p> <p>Repository names should be self explanatory, and they are unique to your account, so don\u2019t worry about having the same name as someone else!</p> <p>Here are some example repository names: </p> <ul> <li> <p><code>24su-asiaam-191a-labs</code></p> </li> <li> <p><code>24su-191a-assignments</code></p> </li> <li> <p><code>aa191-assignments</code></p> </li> </ul> <p>Keep the repository Public, which is in the spirit of sharing, collaboration, and allows anyone to see and improve the code:</p> <p></p> <p>Scroll down to Create Repository:</p> <p></p> <p>Click the Clipboard  button:</p> <p></p> <p>In VS Code  click on: Clone Git Repository</p> <p></p> <p>Paste (PC: Ctrl+V or Mac: Cmd+V) your copied link in the panel above:</p> <p></p> <p>Click on Clone from URL or press Enter :</p> <p></p> <p>Choose a folder to save your files locally to:</p> <p></p> <p>Click on Open this new repository:</p> <p></p> <p>Make sure  Explorer is open in the Activity Bar by clicking on it:</p> <p></p> <p>The open  Explorer should look like this with space to show the files:</p> <p></p> <p>Click the <code>Folder</code> icon to make a new folder:</p> <p></p> <p>Title it <code>week1</code>:</p> <p></p> <p>With the folder selected, click the <code>New file</code> icon and give it the title <code>index.html</code>:</p> <p></p> <p>Make sure <code>index.html</code> is within <code>week1</code>: </p>"}, {"location": "labs/week1/1/", "title": "HTML?! Oh what <code>&lt;tag&gt;</code>gony!", "text": "<p>HTML is what makes up the house for websites. Without it, the CSS and JavaScript cannot function. </p> <p>When HTML is surrounded by an opening <code>&lt;tag&gt;</code> and closing tags<code>&lt;/tag&gt;</code>, it is called an Element:</p> <p><code>&lt;tag&gt; Look Ma'! I'm in a element! &lt;/tag&gt;</code></p> <p>The <code>/</code> of the second tag is used to close a tag. Always be sure to check if you have unclosed elements! Leaving elements unclosed without a closing tag open will break your page. While some tags don\u2019t need to be closed (like the <code>&lt;link&gt;</code> tag), all elements do!</p>"}, {"location": "labs/week1/1/#attributes-in-tags", "title": "Attributes in tags", "text": "<p>We can also decorate tags with attributes to make them unique. </p> <p>You put a keyword declaration inside the <code>tag</code> like so: <code>attribute=\"some value\"</code></p> <p>For example, we can name a tag something:</p> <p><code>&lt;tag name=\"something\"&gt;&lt;/tag&gt;</code></p> <p>But typically, we assign unique names with the <code>id</code> attribute, like so:</p> <p><code>&lt;name id=\"Albert\"&gt;Haha!&lt;/name&gt;</code></p> <p>Wow, that\u2019s my correct name tag! </p>"}, {"location": "labs/week1/1/#boilerplate-vs-template-code", "title": "Boilerplate vs. Template Code", "text": "<p>In coding, boilerplate code is ready to use code that people can freely copy and use with no changes. Think of them as ready-to-eat microwave dinners.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"/&gt;\n  &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Template code refers to sample code that can be copied and pasted, but requires modifications in order for it to work.</p> <p>Here is our template code:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;&lt;!--(1)! --&gt;\n&lt;html&gt;&lt;!--(2)! --&gt;\n    &lt;head&gt;&lt;!--(3)! --&gt;\n        &lt;title&gt;Hello World with MapLibreGL&lt;/title&gt;&lt;!--(4)! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n\n        &lt;!-- I'd add some style if here if I had any --&gt;\n\n    &lt;/head&gt;\n\n    &lt;body&gt;&lt;!--(5)! --&gt;\n        &lt;header&gt;\n            Hello World! &lt;!--(6)! --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;!-- hint: majority of your lab assignment can go here --&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;\n                &lt;!-- Map will be inserted here --&gt;\n            &lt;/div&gt;\n        &lt;/main&gt;\n\n        &lt;div id=\"footer\"&gt;\nCopyright(2024)\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;&lt;!--(7)! --&gt;\n</code></pre> <ol> <li>This tells a web browser what type of file this <code>document</code> is.</li> <li>The <code>HTML</code> code begins here.</li> <li>Content in the <code>head</code> tag is not displayed on the page. </li> <li>The <code>title</code> is shown in the browser\u2019s title bar or in the page\u2019s tab.</li> <li>Content in the <code>body</code> contains most of what needs to be displayed.</li> <li>This content in <code>body</code> is what is actually being showed!</li> <li>The <code>HTML</code> code ends here. </li> </ol> <p>Lab Questions</p> <p>What do you observe in the code?</p> <ol> <li> <p>How does this code differ from the boilerplate code?</p> </li> <li> <p>Why should everything be enclosed in the <code>html</code> tag?</p> </li> <li> <p>Do empty spaces matter in HTML?</p> </li> <li> <p>What is a comment and how do you write one?</p> </li> <li> <p>Is there a difference between the <code>class</code> and <code>id</code> attributes?</p> </li> </ol>"}, {"location": "labs/week1/1/#preview-our-file", "title": "Preview our file", "text": "<p>Install the Live Server   extension by clicking this link:</p> <ul> <li>https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer</li> </ul> <p>After you install the extension, click on  Go Live. </p> <p>Your default browser should automatically pop-up, if your default browser is not Firefox , you will need to copy and paste the link over to view it there.</p> <p></p> <p>Not using the Live Server extension</p> <p>If you cannot or do not want to use live server then you will need to right click on your <code>index.html</code> file and <code>reveal in file explorer</code>. Then, double click on the file. Be aware that checking your code in this is not as efficient because there is no auto-reloading feature.</p>"}, {"location": "labs/week1/1/#in-class-exercise-1", "title": "\u26bd In-Class Exercise #1", "text": "<p>Tasks</p> <ol> <li>Let\u2019s fix our code so that it actually looks presentable. </li> <li>Look for the errors in the template code.</li> <li>Save the file and name it <code>index.html</code> and open it in Firefox.</li> </ol> <p>Extra: If you finish early, try to add your own spin to the HTML file!</p>"}, {"location": "labs/week1/1/#adding-an-image", "title": "Adding an image", "text": "<p>To add an image, you will need to use the <code>&lt;img&gt;</code> tag. </p> <pre><code>&lt;img src=\"https://www.example.com/image.jpg\" alt=\"A description of the image\"&gt;\n</code></pre> <p>The <code>src</code> attribute is the location of your file. It is highly recommended to use a URL or a relative path to your image.</p>"}, {"location": "labs/week1/1/#adding-a-local-image", "title": "Adding a local image", "text": "<p>To add a local image, you will need to place the image in the same folder as your <code>index.html</code> file. </p> <p><pre><code>&lt;img src=\"me.png\" alt=\"A description of the image\"&gt;\n</code></pre>  The path to the image is relative to the location of the <code>index.html</code> file.</p> <p>In VS Code, you can drag and drop the image into the folder where your <code>index.html</code> file is located, like so:</p> <p></p>"}, {"location": "labs/week1/1/#checkpoint", "title": "\ud83c\udfc1Checkpoint", "text": "<p>Info</p> <p>Checkpoints are parts if the lab where you should check your work in case something went wrong!</p> <p>Check to see if your code looks likes the following before moving on:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;!-- hint: majority of your lab assignment can go here --&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                 &lt;img src=\"me.png\"&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;\n                &lt;!-- Map will be inserted here --&gt;\n            &lt;/div&gt;\n        &lt;/main&gt;\n\n        &lt;footer id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"}, {"location": "labs/week1/2/", "title": "Cool Stylin\u2019 Sheets", "text": "<p>Let\u2019s add some Cascading Style Sheets (CSS) to customize our page better.</p>"}, {"location": "labs/week1/2/#selectors-the-ba-css-ics", "title": "Selectors: The ba-CSS-ics", "text": "<p>Insert the following code in the <code>&lt;head&gt;</code> right before the closing tag (i.e. <code>&lt;/head&gt;</code>):</p> index.html<pre><code>&lt;style&gt;\n    html { /* (1)! */\n        background-color: aqua;/* (2)! */\n    }\n&lt;/style&gt;\n</code></pre> <ol> <li><code>html</code> is the <code>CSS</code> selector, basically saying, \u201cget anything in the <code>html</code> tags!</li> <li><code>background-color</code> is the key, and then <code>aqua</code> is the color we are setting it to.</li> </ol> <p>What happened to the page?</p> Answer <p>It became <code>aqua</code>!</p>"}, {"location": "labs/week1/2/#special-selectors", "title": "Special selectors", "text": "<p>The <code>*</code> selector is a special selector that selects all elements on the page. This is useful for resetting all margins and paddings to ensure consistency across browsers. Add the following code to the <code>&lt;style&gt;</code> tag:</p> index.html<pre><code>&lt;style&gt;\n    * {\n        font-family: Arial, sans-serif; /*(1)! */\n    }\n&lt;/style&gt;\n</code></pre> <ol> <li><code>font-family</code> is the key, and then <code>Arial, sans-serif</code> is the font we are setting it to.</li> </ol>"}, {"location": "labs/week1/2/#combining-selectors", "title": "Combining selectors", "text": "<p>You can combine selectors to target specific elements. Add the following code to the <code>&lt;style&gt;</code> tag:</p> index.html<pre><code>html, body {\n    height: 100vh;\n}\n</code></pre> <p>This code sets the height of the <code>html</code> and <code>body</code> elements to <code>100vh</code>, which is 100% of the viewport height. This ensures that the content fits the screen height.</p>"}, {"location": "labs/week1/2/#adding-linked-css", "title": "Adding linked CSS", "text": "<p>CSSelecting content and changing them is cool, but what if you want to change the style of multiple pages? You would have to copy and paste the <code>&lt;style&gt;</code> tag into each page!</p> <p>So this way of using CSS, called inline CSS (because it is in the HTML), can make your HTML file long and cumbersome. </p> <p>Standard practice is to have a separate file for CSS and bring that whole file in as a linked source.</p> <p>Click the New Folder  button:</p> <p></p> <p>Type in styles to name the folder <code>styles</code>:</p> <p></p> <p>Highlight the <code>styles</code> folder by clicking on it:</p> <p></p> <p>Then click on the New file  button:</p> <p></p> <p>Name the file style.css:</p> <p></p> <p>Double click to open the new file. Then copy and paste the following CSS:</p> styles/style.css<pre><code>/* The * selects everything and acts as a global reset to ensure consistency across browsers */\n* {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0; /*(4)! */\n    box-sizing: border-box; /*(1)! */\n}\n\n/* Sets the overall background and ensures the content fits the screen height */\nhtml{\n    background-color: aqua; /*(3)! */\n}\n\nhtml, body {\n    height: 80vh; /*(2)! */\n    padding: 1rem; \n}\n\n/* Defines the page layout using a grid */\nbody {\n    display: grid; /*(5)! */\n    grid-template-areas: \n        \"header\"\n        \"main\"\n        \"footer\"; /*(6)! */\n    grid-template-rows: auto 1fr auto; /* Adjusted to reflect the simplified structure */\n}\n\nmain {\n    display: grid; /*(14)! */\n    grid-template-areas:\n        \"portfolio map\"; /*(15)! */\n    grid-template-columns: 1fr 1fr; /*(16)! */\n}\n\n/* Assigns each major section to a part of the grid */\nheader { \n    grid-area: header; /*(7)! */\n}\n\nmain { \n    grid-area: main; /*(8)! */\n}\n\n.portfolio {\n    grid-area: portfolio; /*(13)! */\n}\n\n#map { \n    grid-area: map; /*(9)! */\n    height: 80vh; /*(10)! */\n}\n\nfooter { \n    grid-area: footer; /*(11)! */\n}\n</code></pre> <ol> <li>Box-Sizing: Makes sure padding and border sizes are included in the total width and height of elements, ensuring a consistent starting point across all browsers by resetting margins, padding, and box-sizing.</li> <li>Viewport Height (VH): Calculates the height of the page to be 80% of the viewport height.</li> <li>Background Color: Colors the background of the page in light blue.</li> <li>Padding: Adds space around the content inside <code>html</code> and <code>body</code>.</li> <li>Grid Display: Turns the <code>body</code> into a grid container for layout.</li> <li>Grid Template Areas: Defines the layout areas for the page sections.</li> <li>Header Area: Places the header at the top of the page.</li> <li>Main Area: Places the main content in the middle, now using a grid to organize internal sections.</li> <li>Map Area: Designates an area for the map.</li> <li>Map Height: Specifies how tall the map should be, taking up 80% of the viewport height.</li> <li>Footer Area: Places the footer at the bottom of the page.</li> <li>(Removed)</li> <li>Portfolio Area: Specifies the grid area for the portfolio section within the main area.</li> <li>Main Grid Display: Introduces a grid within the <code>main</code> area to organize the portfolio and map sections.</li> <li>Main Grid Template Areas: Defines the layout for the portfolio and map within the main area.</li> <li>Main Grid Columns: Sets up two columns of equal width for the portfolio and map sections.</li> </ol> <p>Reminder!</p> <p>Remember to save the <code>style.css</code> file (PC:Ctrl+S | Mac:Cmd+S!</p> <p>Next, go back to the index.html file and replace your entire <code>&lt;style&gt; &lt;/style&gt;</code> content and tags with this code:</p> index.html<pre><code>&lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n</code></pre> <p>This code tells the HTML file to use all of the CSS styles linked in the <code>href</code> attribute.</p> <p>More external CSS files?</p> <p>You can have as many external references as you\u2019d like, as long as you link them in this way. The bottom most CSS file has the most priority because it is the last CSS read and applied!</p>"}, {"location": "labs/week1/2/#in-class-exercise-2", "title": "\u26bd In-Class Exercise #2", "text": "<p>Task</p> <ol> <li>Link <code>MapLibreGL</code>\u2019s CSS that exists at this url: <code>https://unpkg.com/maplibre-gl/dist/maplibre-gl.css</code></li> </ol> <p>Extra: If you finish early, try to see if you can load MapLibreGL\u2019s CSS locally instead!</p> <p>We will go into CSS in more detail later, but what you need to know is that CSS has <code>HTML element selectors</code> which are then followed by the styles in <code>{ }</code>.</p>"}, {"location": "labs/week1/2/#checkpoint", "title": "\ud83c\udfc1Checkpoint", "text": "<ul> <li>Your <code>css</code> file should be in a folder called <code>styles</code> and named <code>style.css</code>.</li> <li>Your <code>index.html</code> file should have a link to the <code>style.css</code> file.</li> <li>Your <code>index.html</code> file should have a link to the <code>maplibre-gl.css</code> file.</li> </ul> <p>Check to see if your code looks likes the following before moving on:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with MapLibreGl&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- MapLibreGL's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.css\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                &lt;img src=\"me.png\"&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;/main&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> With CommentsWithout Comments styles/style.css<pre><code>/* The * selects everything and acts as a global reset to ensure consistency across browsers */\n* {\n    font-family: Arial, sans-serif; /* Sets a default font for the whole page */\n    margin: 0; /* Removes default margins */\n    padding: 0; /* Removes default padding */\n    box-sizing: border-box; /* Makes sure borders and paddings are included in the element's total width and height */\n}\n\n/* Sets the background color of the whole page and ensures content fits the screen height */\nhtml {\n    background-color: aqua; /* Sets a light blue background color */\n}\n\n/* Applies to both &lt;html&gt; and &lt;body&gt; */\nhtml, body {\n    height: 80vh; /* Sets the height to 80% of the viewport height, making sure the content fits on the screen */\n    padding: 1rem; /* Adds a bit of space around the content for better readability */\n    box-sizing: border-box; /* Ensures padding does not add to the set height */\n}\n\n/* Defines the main layout of the page using CSS Grid */\nbody {\n    display: grid; /* Enables CSS Grid layout */\n    grid-template-areas: \n        \"header\" /* Top area for the header */\n        \"main\"   /* Middle area for the main content */\n        \"footer\"; /* Bottom area for the footer */\n    grid-template-rows: auto 1fr auto; /* Sizes: auto for header and footer to fit content, 1fr for main to fill remaining space */\n}\n\n/* Sets up the layout for the main content area, dividing it into two columns */\nmain {\n    display: grid; /* Enables CSS Grid within the main element */\n    grid-template-areas:\n        \"portfolio map\"; /* Divides the main area into portfolio and map sections side by side */\n    grid-template-columns: 1fr 1fr; /* Allocates equal width to both sections */\n}\n\n/* Grid area assignments for each major section, linking them to their respective areas in the grid */\nheader { \n    grid-area: header; /* Assigns the header to its grid area */\n}\n\nmain { \n    grid-area: main; /* Assigns the main content to its grid area */\n}\n\n.portfolio {\n    grid-area: portfolio; /* Assigns the portfolio section to its grid area */\n}\n\n#map { \n    grid-area: map; /* Assigns the map section to its grid area */\n    height: 80vh; /* Sets the map's height to 80% of the viewport height */\n}\n\nfooter { \n    grid-area: footer; /* Assigns the footer to its grid area */\n}\n</code></pre> styles/style.css<pre><code>* {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    background-color: aqua;\n}\n\nhtml, body {\n    height: 80vh;\n    padding: 1rem;\n    box-sizing: border-box;\n}\n\nbody {\n    display: grid;\n    grid-template-areas: \n        \"header\"\n        \"main\"\n        \"footer\";\n    grid-template-rows: auto 1fr auto;\n}\n\nmain {\n    display: grid;\n    grid-template-areas:\n        \"portfolio map\";\n    grid-template-columns: 1fr 1fr;\n}\n\nheader { \n    grid-area: header;\n}\n\nmain { \n    grid-area: main;\n}\n\n.portfolio {\n    grid-area: portfolio;\n}\n\n#map { \n    grid-area: map;\n    height: 80vh;\n}\n\nfooter { \n    grid-area: footer;\n}\n</code></pre>"}, {"location": "labs/week1/3/", "title": "Basics of JavaScript", "text": "<p>Recall from the pre-lab reading that a webpage is like a house:</p> <ul> <li>HTML is the scaffolding/foundation of the house</li> <li>CSS is the paint, carpets, etc. that makes the house look nice</li> <li>JavaScript is the appliances that adds function to the house</li> </ul>"}, {"location": "labs/week1/3/#why-start-with-html-and-css-first", "title": "Why start with HTML and CSS first?", "text": "<p>In order to do any JavaScript coding, you need to make sure your content has a place to show up! </p>"}, {"location": "labs/week1/3/#what-is-javascript", "title": "What is JavaScript?", "text": "<p>JavaScript is like the scriptwriter behind the scenes, turning static web pages into dynamic, interactive stories that captivate the audience. While there are various frameworks like React.js and Vue.js that offer additional features, this class will focus on the basics of JavaScript, also known as \u201cvanilla\u201d JavaScript, following the ES6+ standards. Learn more about ES6+ standards here.</p> <p>In HTML, we use <code>&lt;script&gt;</code> tags to include JavaScript code. These tags can be placed in two main spots:</p> <ol> <li>Inside the <code>&lt;head&gt;</code> section: JavaScript here loads before anything else on the page. This is a good spot for scripts that need to set things up before the page shows to the user.</li> <li>Inside the <code>&lt;body&gt;</code> section or right before the closing <code>&lt;/body&gt;</code> tag: This is where you typically put JavaScript that affects the content of the page. Since it loads after the HTML, it ensures all your page elements are loaded before the script tries to interact with them.</li> </ol> <p>For our purposes, especially when working with libraries like <code>MapLibreGL.js</code>, it\u2019s important to load the library first. This means placing the <code>MapLibreGL.js</code> script in the <code>&lt;head&gt;</code> to ensure it\u2019s loaded and ready to go. Our custom JavaScript, which might interact with or initialize the map, should come later, ideally at the end of the <code>&lt;body&gt;</code> section. You can even place it in a <code>&lt;footer&gt;</code> tag to keep things organized and ensure it loads at the right time.</p> <p>Remember, the order in which scripts are loaded can make or break your webpage- imagine putting the ending of a mystery movie at the beginning!</p>"}, {"location": "labs/week1/3/#its-a-me-lego-var-io", "title": "It\u2019s a me Lego <code>Var</code>-io", "text": "<p>Variables are like boxes that hold information, try to think of them as the building blocks of the instructions.</p> <p>Variables are the Lego blocks of programming and can be numbers, text, or even collections of other variables! In programming languages we call variables can be classified into types. In order to use a variable, you have to declare variables. With JavaScript, variables are automatically assigned types based on their declaration. </p> <p>In JavaScript all declarations and lines should end with a semicolon <code>;</code>, which is like a <code>. (period)</code> in English that says, my statement is done.</p> <p>These are examples of a declaration:</p> <pre><code>var day = 8;\nvar name = \"Albert\";\n</code></pre> <p>In front you see the <code>var</code> keyword that tells the web browser, \u201cHey this is a variable!\u201d. In this example, <code>day</code> is a numeric type with a value of <code>8</code> and <code>name</code> is a string type. Each type has certain properties and uses, for example you can add numbers together using something like <code>day + day</code>, but you adding strings will simply concatenate and not total them.</p> <p>What is a keyword?</p> <p>In most coding languages, a keyword is a word that tells a program to treat the following text, numbers, or characters in a specific way. For example, <code>var myName</code> says treat <code>myName</code> as a variable.  This means you CANNOT name a variable <code>var</code>, Jar Jar Binks cousin Var Var Binks is VARy bad for JavaScript to see! i.e. <code>var var</code> Also note, you cannot use <code>spaces</code> in variable names!</p>"}, {"location": "labs/week1/3/#some-more-variable-definitions", "title": "Some more variable definitions", "text": "<p>What we really need to understand about variables is that they act like boxes where you can store or take information out of. - <code>const</code> acts like a locked safe that will not let you put anything into it after you define it - <code>let</code> is like a regular box. -  <code>var</code> is <code>VARy</code> problematic because it can be both locked and unlocked</p> <p>Here are some of the types in JavaScript:</p> <pre><code>//number\nlet box1 = 5;\nlet box2 = 5.0;\n\n//string\nlet box3 = 'five';\nlet box4 = \"five\";\n\n// string literal, uses backticks and ${variable} to bring in another variable\nlet box5 = `this is from box #4: ${box4}`;\n\n// array\nlet box6 = [1,2,3,4,5]; \n\n// object, stores variables together, can be of different types!\nlet box7 = {\"number\": 'five', \"value\":5};\n\n// boolean (true or false)\nlet box8 = true;\n\n// null value\nlet emptyBox;\n</code></pre> <p>Remember, to declare a variable (give it a value) you must use the  <code>=</code> symbol, like so:</p> <pre><code>let my_variable = \"exist!\";\n</code></pre> <p>Anatomy of a variable declaration</p> <ul> <li><code>let</code> is the keyword declaration of a variable</li> <li><code>my_variable</code> is the variable\u2019s name</li> <li><code>\"exist!\"</code> is the value for this variable</li> <li><code>;</code> defines the end of a line in JavaScript </li> </ul>"}, {"location": "labs/week1/3/#lets-a-go", "title": "LET\u2019s a go!", "text": "<p>With JavaScript ES6, <code>let</code> and <code>const</code> keywords were introduced to declare variables. This change means that the recommend practice is to no longer use the <code>var</code> keyword. <code>let</code> and <code>const</code> variables get declared in the same way:</p> <pre><code>let day = 8; //(1)!\nconst name = \"Albert\"; // (2)!\n</code></pre> <ol> <li>The <code>let</code> keyword LETS a variable CHANGE! </li> <li>The <code>const</code> keyword declaration keeps a variable CONSTant!</li> </ol>"}, {"location": "labs/week1/3/#let-vs-const-vs-var", "title": "Let vs Const vs Var", "text": "<p>What is the difference?</p> <ol> <li>The <code>let</code> keyword declaration LETS a variable change</li> <li>The <code>const</code> keyword delcaration a variable CONSTant and will never change.</li> <li>The <code>var</code> allows varaibles to change or never change depending on where it was declared! VERY PROBLEMATIC!</li> </ol> <p>Because <code>var</code> can be changing (mutable) and unchanging at the same time, so <code>var</code> was changed into off into two different variable types, <code>let</code> and <code>const</code>.</p> <p>Scopes: Local vs. Global</p> <p>Where you <code>declare</code> a variable sets the scope to either a local one (limited to a function or area in the code) or global (can be accessed by anything/anywhere else in the code).</p> <p>So, bye bye <code>var</code> and <code>LET</code> us welcome our new <code>CONST</code> variables to the JavaScript programming world.</p> <p>TLDR</p> <p>DO NOT USE <code>var</code> unless you need to code for Internet Explorer.</p>"}, {"location": "labs/week1/3/#consolelog", "title": "Console.log()", "text": "<p>By itself, our script tag does nothing. So, one VERY helpful JavaScript tool (method) that we should familarize ourself with is <code>console.log()</code>, because it allows us to test our code.</p> <p>Add the following script: <pre><code>&lt;script&gt;\n    console.log('Hello Asian Am 191! :)');\n&lt;/script&gt;\n</code></pre></p>"}, {"location": "labs/week1/3/#nothing-happened-what", "title": "Nothing happened?! What!?", "text": "<p>Actually, you are about to unlock your full web developer potential! </p> <p>In Firefox, right click anywhere on the page and the click <code>Inspect Element</code>:  This opens the <code>Developer Toolbar</code>!! You can find it by going to the Menu and going to <code>Web Developer</code> and then <code>Web Developer Tools</code>.</p> <p>Click on the Console button:</p> <p></p> <p>Yay! Our message is there!</p> <p></p>"}, {"location": "labs/week1/3/#linking-to-another-javascript-file", "title": "Linking to another JavaScript file", "text": "<p>Similar to the CSS files, we can move the JavaScript file into its own folder to avoid cluttering the HTML file. Importing libraries is the main way we level up our webpage.</p> <p>BUT!!! Instead of <code>&lt;link&gt;</code> we use the <code>&lt;script&gt;</code> tag:</p> <pre><code> &lt;script src=\"YOUR_SCRIPT_NAME.js\"&gt;&lt;/script&gt; \n</code></pre> <p>The <code>src</code> attribute is location of your file.</p>"}, {"location": "labs/week1/3/#in-class-exercise-2", "title": "In-class Exercise #2", "text": "Answer  1. Click on the `New Folder` button:  ![](./media/answerJS.png)  2. Type in `js`:  ![](./media/answerJS2.png)  3. Click on the `New File` button:  ![](./media/answerJS3.png)  4. Give it a name, like `init.js`  ![](./media/answerJS4.png)  5. Within `index.html` before the end of the `` element include the following:  <pre><code>    //\n    // ... HTML Truncated for brevity ...\n    // \n    &lt;script src=\"./js/init.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n</code></pre>"}, {"location": "labs/week1/3/#task", "title": "Task:", "text": "<ul> <li>Create a new folder called <code>js</code></li> <li>Add our script in there</li> <li>Get our message to show up in the console </li> </ul>"}, {"location": "labs/week1/3/#hint", "title": "Hint", "text": "<p>Never include <code>&lt;script&gt;&lt;/script&gt;</code> tags inside of a Javascript file, those are <code>HTML elements</code>!!!</p>"}, {"location": "labs/week1/3/#hello-maplibregl-finally", "title": "Hello MapLibreGL\u2026 Finally..", "text": "<p>OK, why did we do ALL of that? Well, when we use MapLibreGL, we actually need to bring in MapLibreGL\u2019s JavaScript files!</p> <p>So, in our header, let\u2019s add the following:</p> <pre><code>&lt;!-- MapLibreGL's JavaScript--&gt;\n&lt;script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Now, let\u2019s go ahead and add a container for our map. </p> <p>Notice in <code>&lt;div id=\"main\"&gt;&lt;/div&gt;</code> that there is a <code>map</code> div after our portfolio section: </p> <pre><code>&lt;div id=\"map\"&gt;&lt;/div&gt;\n</code></pre> <p>That is the container for the map! </p> <p>Open up the JavaScript file again and add the following MapLibreGL code template:</p> <pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: [ -118.444, 34.0709], // Starting position [lng, lat]\n    zoom: 15 // Starting zoom level\n});\n\n// Add a marker to the map\nnew maplibregl.Marker()\n    .setLngLat([ -118.444, 34.0709])\n    .setPopup(new maplibregl.Popup({ offset: 25 }) // Add popups\n        .setHTML('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I used to work in '))\n    .addTo(map);\n</code></pre>"}, {"location": "labs/week1/3/#class-exercise-3-adding-more-markers", "title": "Class Exercise #3 - Adding more markers", "text": "<ul> <li>Looking at the code above a little bit, we can see some latitude/longitude pairs. Copy the marker code add more markers of your choosing. Note: Be sure give the marker variable a new name, like <code>marker2</code>.  </li> <li>To find latitude/longitude of coordinates, please use this website:</li> <li>https://www.latlong.net/</li> </ul>"}, {"location": "labs/week1/3/#checkpoint", "title": "\ud83c\udfc1Checkpoint", "text": "<ul> <li>Your <code>index.html</code> should have a <code>&lt;div&gt;</code> with an ID of <code>map</code></li> <li>Your <code>init.js</code> should have the MapLibreGL code template</li> <li>Your <code>init.js</code> should be linked in your <code>index.html</code> file</li> </ul>"}, {"location": "labs/week1/3/#check-your-work", "title": "Check your work", "text": "<p>Check to see if your code looks likes the following before moving on:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with MapLibreGl&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- MapLibreGL's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.css\" /&gt;\n\n        &lt;!-- MapLibreGL's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                &lt;img src=\"me.png\"&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;/main&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: [ -118.444, 34.0709], // Starting position [lng, lat]\n    zoom: 15 // Starting zoom level\n});\n\n// Add a marker to the map\nnew maplibregl.Marker()\n    .setLngLat([ -118.444, 34.0709])\n    .setPopup(new maplibregl.Popup({ offset: 25 }) // Add popups\n        .setHTML('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I used to work in '))\n    .addTo(map);\n</code></pre> With CommentsWithout Comments styles/style.css<pre><code>/* Global reset to ensure consistency across browsers */\n* {\n    font-family: Arial, sans-serif; /* Sets a default font for the whole page */\n    margin: 0; /* Removes default margins */\n    padding: 0; /* Removes default padding */\n    box-sizing: border-box; /* Makes sure borders and paddings are included in the element's total width and height */\n}\n\n/* Sets the background color of the whole page and ensures content fits the screen height */\nhtml {\n    background-color: aqua; /* Sets a light blue background color */\n}\n\n/* Applies to both &lt;html&gt; and &lt;body&gt; */\nhtml, body {\n    height: 80vh; /* Sets the height to 80% of the viewport height, making sure the content fits on the screen */\n    padding: 1rem; /* Adds a bit of space around the content for better readability */\n    box-sizing: border-box; /* Ensures padding does not add to the set height */\n}\n\n/* Defines the main layout of the page using CSS Grid */\nbody {\n    display: grid; /* Enables CSS Grid layout */\n    grid-template-areas: \n        \"header\" /* Top area for the header */\n        \"main\"   /* Middle area for the main content */\n        \"footer\"; /* Bottom area for the footer */\n    grid-template-rows: auto 1fr auto; /* Sizes: auto for header and footer to fit content, 1fr for main to fill remaining space */\n}\n\n/* Sets up the layout for the main content area, dividing it into two columns */\nmain {\n    display: grid; /* Enables CSS Grid within the main element */\n    grid-template-areas:\n        \"portfolio map\"; /* Divides the main area into portfolio and map sections side by side */\n    grid-template-columns: 1fr 1fr; /* Allocates equal width to both sections */\n}\n\n/* Grid area assignments for each major section, linking them to their respective areas in the grid */\nheader { \n    grid-area: header; /* Assigns the header to its grid area */\n}\n\nmain { \n    grid-area: main; /* Assigns the main content to its grid area */\n}\n\n.portfolio {\n    grid-area: portfolio; /* Assigns the portfolio section to its grid area */\n}\n\n#map { \n    grid-area: map; /* Assigns the map section to its grid area */\n    height: 80vh; /* Sets the map's height to 80% of the viewport height */\n}\n\nfooter { \n    grid-area: footer; /* Assigns the footer to its grid area */\n}\n</code></pre> styles/style.css<pre><code>* {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    background-color: aqua;\n}\n\nhtml, body {\n    height: 80vh;\n    padding: 1rem;\n    box-sizing: border-box;\n}\n\nbody {\n    display: grid;\n    grid-template-areas: \n        \"header\"\n        \"main\"\n        \"footer\";\n    grid-template-rows: auto 1fr auto;\n}\n\nmain {\n    display: grid;\n    grid-template-areas:\n        \"portfolio map\";\n    grid-template-columns: 1fr 1fr;\n}\n\nheader { \n    grid-area: header;\n}\n\nmain { \n    grid-area: main;\n}\n\n.portfolio {\n    grid-area: portfolio;\n}\n\n#map { \n    grid-area: map;\n    height: 80vh;\n}\n\nfooter { \n    grid-area: footer;\n}\n</code></pre>"}, {"location": "labs/week1/4/", "title": "Let\u2019s Git to Committing!", "text": "<p>Make sure GIT is installed!</p> <p>Before you can commit, you need to make sure that you have <code>Git</code> installed. If you don\u2019t have it installed, please follow the instructions here.</p> <p>Commits are the basis of <code>Git</code> and <code>GitHub</code>.</p> <p>Do not upload manually!</p> <p>While it may be tempting to manually upload files through GitHub, for the purposes of this class, this will cause many headaches. For this class you should only commit through VS Code!!!</p> <p>In a nutshell, Committing is <code>Git</code> speak for saving files. However, these saves come with a note so that you can refer back to save later!</p> <p>It\u2019s better than autosaving because you have a description of what that save is!</p> <p>Let\u2019s make our first commit:</p> <p>Click on the <code>Source Control</code> icon in the activity bar in VS Code:</p> <p></p> <p>Enter a note for your commit:</p> <p></p> <p>Click the <code>checkmark</code> OR use the following shortcut:</p> <ul> <li> <p>PC: Ctrl+Enter</p> </li> <li> <p>MAC: Cmd+Enter</p> </li> </ul> <p></p> <p>Next, click on the <code>...</code> for expanding the menu items:</p> <p></p> <p>Finally, click on <code>Push</code> to upload your changes to GitHub:</p> <p></p> <p>If you see the <code>VS Code periodically wants to run fetch</code> dialogue, click <code>Yes</code> to allow it to randomly update your repository.</p> <p></p>"}, {"location": "labs/week1/4/#optional-easier-commits", "title": "Optional: Easier Commits", "text": "<p>Timesaving Tip!</p> <p>You can avoid having to do the extra steps of clicking <code>...</code> then <code>push</code> by turning on a setting to <code>push</code> after each commit!</p> <p>Here\u2019s how to do so:</p> <ul> <li>Go to <code>File</code> -&gt; <code>Prefences</code> -&gt; Settings</li> </ul> <p></p> <ul> <li>Search post commit in the text box at the top</li> </ul> <p></p> <ul> <li>Change the setting from <code>none</code> to push</li> </ul> <p></p> <ul> <li>Now the next time you commit by pressing the following shortcut, it will push automatically!</li> <li>PC: Ctrl+Enter</li> <li>MAC: Cmd+Enter</li> </ul> <p></p>"}, {"location": "labs/week1/4/#using-github-pages", "title": "Using GitHub Pages", "text": "<p>After you have saved and committed your files to GitHub visit your repository on https://www.github.com.</p> <p>What is a repository?</p> <p>A repository is GitHub speak for location for a specific project and/or bunch of files. You can think of it as <code>folder</code>. For this class, instead of making a new repository for each week we will have just one lab assignment repository with different folders for the weeks. Learn more about repositories here: About repositories (GitHub.com).</p> <p>You can find your repositories by clicking on your profile picture:</p> <p></p> <p>Then click on Your repositories</p> <p></p> <p>Find your assignment repository and click on it:</p> <p></p> <p>Click on Settings:</p> <p></p> <p>Click on Pages:</p> <p></p> <p>and under Source , click on the main branch <sup>1</sup>:</p> <p></p> <p>Choose root:</p> <p></p> <p>Click on Save:</p> <p></p> <p>Copy this link:</p> <p></p> <p>Nothing shows up?!\ud83d\ude31</p> <p>If you navigate to <code>https://YOUR_GITHUB_ACCOUNT.github.io/23s-asiaam-191a-assignments/</code> it will be blank because there\u2019s nothing in the <code>root</code>.</p> <p>You have to add <code>/YOUR_WEEK_1_FOLDER_NAME/index.html</code> to access the contents of the lab!</p> <p>For example, <code>https://albertkun.github.io/23s-asiaam-191a-assignments/week1/index.html</code></p> <p>Post it in the Discussion forum for the appropriate lab:</p> <p></p> <p>Paste your link in the comment box at the bottom</p> <p></p> <p>Click on Comment to submit the lab:</p> <p></p> <ol> <li> <p>Your branch may be called master if your repo was created in VS Code. Read more about why here.\u00a0\u21a9</p> </li> </ol>"}, {"location": "labs/week1/5/", "title": "\u2705 Final Template Code", "text": "index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with MapLibreGl&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- MapLibreGL's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.css\" /&gt;\n\n        &lt;!-- MapLibreGL's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                &lt;img src=\"me.png\"&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;/main&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: [ -118.444, 34.0709], // Starting position [lng, lat]\n    zoom: 15 // Starting zoom level\n});\n\n// Add a marker to the map\nnew maplibregl.Marker()\n    .setLngLat([ -118.444, 34.0709])\n    .setPopup(new maplibregl.Popup({ offset: 25 }) // Add popups\n        .setHTML('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I used to work in '))\n    .addTo(map);\n</code></pre> Without CommentsWith Comments styles/style.css<pre><code>* {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    background-color: aqua;\n}\n\nhtml, body {\n    height: 80vh;\n    padding: 1rem;\n    box-sizing: border-box;\n}\n\nbody {\n    display: grid;\n    grid-template-areas: \n        \"header\"\n        \"main\"\n        \"footer\";\n    grid-template-rows: auto 1fr auto;\n}\n\nmain {\n    display: grid;\n    grid-template-areas:\n        \"portfolio map\";\n    grid-template-columns: 1fr 1fr;\n}\n\nheader { \n    grid-area: header;\n}\n\nmain { \n    grid-area: main;\n}\n\n.portfolio {\n    grid-area: portfolio;\n}\n\n#map { \n    grid-area: map;\n    height: 80vh;\n}\n\nfooter { \n    grid-area: footer;\n}\n</code></pre> styles/style.css<pre><code>/* The * selects everything and acts as a global reset to ensure consistency across browsers */\n* {\n    font-family: Arial, sans-serif; /* Sets a default font for the whole page */\n    margin: 0; /* Removes default margins */\n    padding: 0; /* Removes default padding */\n    box-sizing: border-box; /* Makes sure borders and paddings are included in the element's total width and height */\n}\n\n/* Sets the background color of the whole page and ensures content fits the screen height */\nhtml {\n    background-color: aqua; /* Sets a light blue background color */\n}\n\n/* Applies to both &lt;html&gt; and &lt;body&gt; */\nhtml, body {\n    height: 80vh; /* Sets the height to 80% of the viewport height, making sure the content fits on the screen */\n    padding: 1rem; /* Adds a bit of space around the content for better readability */\n    box-sizing: border-box; /* Ensures padding does not add to the set height */\n}\n\n/* Defines the main layout of the page using CSS Grid */\nbody {\n    display: grid; /* Enables CSS Grid layout */\n    grid-template-areas: \n        \"header\" /* Top area for the header */\n        \"main\"   /* Middle area for the main content */\n        \"footer\"; /* Bottom area for the footer */\n    grid-template-rows: auto 1fr auto; /* Sizes: auto for header and footer to fit content, 1fr for main to fill remaining space */\n}\n\n/* Sets up the layout for the main content area, dividing it into two columns */\nmain {\n    display: grid; /* Enables CSS Grid within the main element */\n    grid-template-areas:\n        \"portfolio map\"; /* Divides the main area into portfolio and map sections side by side */\n    grid-template-columns: 1fr 1fr; /* Allocates equal width to both sections */\n}\n\n/* Grid area assignments for each major section, linking them to their respective areas in the grid */\nheader { \n    grid-area: header; /* Assigns the header to its grid area */\n}\n\nmain { \n    grid-area: main; /* Assigns the main content to its grid area */\n}\n\n.portfolio {\n    grid-area: portfolio; /* Assigns the portfolio section to its grid area */\n}\n\n#map { \n    grid-area: map; /* Assigns the map section to its grid area */\n    height: 80vh; /* Sets the map's height to 80% of the viewport height */\n}\n\nfooter { \n    grid-area: footer; /* Assigns the footer to its grid area */\n}\n</code></pre> <p>```</p> <p>Now you should be ready to take on the lab assignment!</p>"}, {"location": "labs/week1/extra/", "title": "Extra", "text": ""}, {"location": "labs/week1/extra/#exploration", "title": "Exploration:", "text": "<p>If you\u2019d rather use icons then a circular color, then try to see if you can implement this code, be sure to have a custom icon ready!</p>"}, {"location": "labs/week1/extra/#customizing-icons", "title": "Customizing Icons", "text": "<pre><code>function createCustomIcon (feature, latlng) {\n    // Create a DOM element for the marker\n    const el = document.createElement('div');\n    el.style.backgroundImage = 'url(my-icon.png)';\n    el.style.width = '25px'; // iconSize width\n    el.style.height = '25px'; // iconSize height\n    el.style.backgroundSize = '100%';\n    el.style.display = 'block';\n    el.style.borderRadius = '50%'; // Optional: makes the icon circular\n    el.style.boxShadow = '0px 0px 20px rgba(0, 0, 0, 0.5)'; // Optional: adds shadow effect\n\n  return new maplibregl.Marker(el)\n    .setLngLat([latlng.lng, latlng.lat]); // Ensure the order is longitude, latitude\n}\n</code></pre> <p>The following code will add a geojson called <code>ca_counties.geojson</code> with a field <code>TOTAL_POP</code> onto your map:</p> <pre><code>// Step 1: Load GeoJSON Data\nmap.on('load', function() {\n  // Step 2: Add a GeoJSON Source\n  map.addSource('ca_counties', {\n    type: 'geojson',\n    data: 'js/lab1.geojson' // Path to your GeoJSON file\n  });\n\n  // Step 3: Add a Layer for the GeoJSON Data\n  map.addLayer({\n    id: 'counties',\n    type: 'fill',\n    source: 'ca_counties',\n    layout: {},\n    paint: {\n      'fill-color': [\n        'step',\n        ['get', 'TOTAL_POP'],\n        '#FFEDA0', 10000,\n        '#FED976', 200000,\n        '#FEB24C', 500000,\n        '#BD0026', 1000000,\n        '#800026'\n      ],\n      'fill-opacity': 0.7\n    }\n  });\n\n  // Optional: Add a popup on click\n  map.on('click', 'counties', function(e) {\n    new mapboxgl.Popup()\n      .setLngLat(e.lngLat)\n      .setHTML(e.features[0].properties.name)\n      .addTo(map);\n  });\n\n  // Change the cursor to a pointer when over the layer.\n  map.on('mouseenter', 'counties', function() {\n    map.getCanvas().style.cursor = 'pointer';\n  });\n\n  // Change it back to a default cursor when it leaves.\n  map.on('mouseleave', 'counties', function() {\n    map.getCanvas().style.cursor = '';\n  });\n});\n</code></pre>"}, {"location": "labs/week1b/", "title": "MapLibRevisiting Portfolios", "text": ""}, {"location": "labs/week1b/#objectives", "title": "Objectives", "text": "<p>Goals</p> <ul> <li>Get an API Key</li> <li>Add some markers and popups to your map</li> <li>Styling your portfolio</li> </ul>"}, {"location": "labs/week1b/#outline", "title": "Outline", "text": "<ol> <li>The (API) KEY to BaseMaps</li> <li>Adding Markers and styling Popups</li> <li>Styling your portfolio</li> <li>Final Lab Code</li> </ol> <p>This lab serves as an opportunity to revisit your portfolio and style it a bit more before turning it in on Wednesday. You will be adding markers and popups to your map, as well as styling your portfolio to make it look more professional.</p>"}, {"location": "labs/week1b/#starting-template-code-for-lab-3", "title": "Starting Template Code for lab #3", "text": "<p>Use the following template code or your lab assignment #1:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with MapLibreGl&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- MapLibreGL's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.css\" /&gt;\n\n        &lt;!-- MapLibreGL's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                &lt;img src=\"me.png\"&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;/main&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: [ -118.444, 34.0709], // Starting position [lng, lat]\n    zoom: 15 // Starting zoom level\n});\n\n// Add a marker to the map\nnew maplibregl.Marker()\n    .setLngLat([ -118.444, 34.0709])\n    .setPopup(new maplibregl.Popup({ offset: 25 }) // Add popups\n        .setHTML('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I used to work in '))\n    .addTo(map);\n</code></pre> styles/style.css<pre><code>* {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    background-color: aqua;\n}\n\nhtml, body {\n    height: 80vh;\n    padding: 1rem;\n    box-sizing: border-box;\n}\n\nbody {\n    display: grid;\n    grid-template-areas: \n        \"header\"\n        \"main\"\n        \"footer\";\n    grid-template-rows: auto 1fr auto;\n}\n\nmain {\n    display: grid;\n    grid-template-areas:\n        \"portfolio map\";\n    grid-template-columns: 1fr 1fr;\n}\n\nheader { \n    grid-area: header;\n}\n\nmain { \n    grid-area: main;\n}\n\n.portfolio {\n    grid-area: portfolio;\n}\n\n#map { \n    grid-area: map;\n    height: 80vh;\n}\n\nfooter { \n    grid-area: footer;\n}\n</code></pre> <p></p>"}, {"location": "labs/week1b/0/", "title": "The (API) KEY to BaseMaps", "text": "<p>MapLibreGL is a powerful tool that allows you to create beautiful maps. However, it requires an API key to access the base maps. In this lab, you will learn how to get an API key and use it in your code.</p> <p>You may have noticed that I provided an API key in the email sent last week:</p> After fixBefore fix <pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: [-118.45, 34.05], // Starting position [lng, lat]\n    zoom: 12 // Starting zoom level\n});\n</code></pre> <pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', // Your style URL\n    center: [-118.45, 34.05], // Starting position [lng, lat]\n    zoom: 12 // Starting zoom level\n});\n</code></pre> <p>Unfortunately, this key used last week was not valid <code>get_your_own_OpIi9ZULNHzrESv6T2vL</code> for the web, sorry about that!</p> <p>While you can use my key: <code>wsyYBQjqRwKnNsZrtci1</code> for now, it is recommended that you get your own API key. This will allow you to use MapLibreGL in your projects without any restrictions and not depend on my key when I change or remove it!</p>"}, {"location": "labs/week1b/0/#getting-an-api-key", "title": "Getting an API Key", "text": "<p>To get an API key, you need to sign up for a free account on MapTiler. Once you have signed up, you can generate an API key by following these steps:</p> <ol> <li> <p>Log in to your MapTiler account.</p> </li> <li> <p>Click on the <code>API</code> tab in the top menu.</p> </li> </ol> <p></p> <ol> <li>Click on the <code>New Key</code> button.</li> </ol> <p></p> <ol> <li>Enter a <code>Description</code>for your API key (e.g., <code>MapLibreGL Key for AA191A</code>).</li> <li>Under <code>Allowed HTTP Origins</code> add the following:<ul> <li><code>localhost:5500</code></li> <li><code>127.0.0.1:5500</code></li> <li><code>YOUR_GITHUB_USERNAME.github.io</code> (e.g. <code>albertkun.github.io</code>)</li> </ul> </li> </ol> <p>What is a <code>domain</code></p> <p>A domain is the address of a website, such as <code>localhost</code> or <code>github.io</code>. By restricting your API key to specific domains, you can control where it can be used. You also buy a domain name to make your website more professional, like <code>www.albert.com</code> but they need to be unique and you need to pay for them. Read more on MDN here: Understanding domain names</p> <p>After following those steps, your API key will only work on the specified domains, which is the localhost and your GitHub Pages site. This will help protect your key from unauthorized use.</p> <ol> <li>Check to see if your settings are similar to this and then click on the <code>Create</code> button.</li> </ol> <p></p> <ol> <li>Copy your API key</li> </ol> <p></p> <ol> <li>and paste it into your code here</li> </ol> js/init.js<pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets/style.json?key=YOUR_KEY_GOES_HERE', // Style URL with your API key\n    center: [-118.45, 34.05], // Starting position [lng, lat]\n    zoom: 12 // Starting zoom level\n});\n</code></pre> <ol> <li>Save your changes and refresh the page.</li> <li>You should now see the base map displayed on your map.</li> </ol>"}, {"location": "labs/week1b/0/#changing-the-base-map", "title": "Changing the base map", "text": "<p>Now that you have your own API key, you can change the base map to any style you like. You can find a list of available styles on the MapTiler website.</p> <p></p> <p>Once you find one your like (you can even create your own now!), you can scroll down to the bottom of the page to find the <code>Style URL</code> that you can use in your code, by copying it:</p> <p></p> <p>For example:</p> <p><code>https://api.maptiler.com/maps/streets-v2-light/style.json?key=wsyYBQjqRwKnNsZrtci1</code></p> <p>Now, just paste that <code>style</code> URL in your code with the style you want to use into our <code>map</code> object like this:</p> js/init.js<pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets-v2-light/style.json?key=wsyYBQjqRwKnNsZrtci1', // Style URL with your API key\n    center: [-118.45, 34.05], // Starting position [lng, lat]\n    zoom: 12 // Starting zoom level\n});\n</code></pre>"}, {"location": "labs/week1b/1/", "title": "Adding Markers and styling Popups", "text": "<p>The syntax for adding a marker in MapLibreGL is as follows:</p> <pre><code>let longitude = -118.45;\nlet latitude = 34.05;\n\n// Add a marker to the map\nconst marker = new maplibregl.Marker()\n    .setLngLat([longitude, latitude])\n    .addTo(map);\n</code></pre> <p>In this code snippet, <code>longitude</code> and <code>latitude</code> are the longitude and latitude coordinates of the marker. You can add multiple markers to the map by repeating this code snippet with different coordinates.</p>"}, {"location": "labs/week1b/1/#resources-to-find-coordinates", "title": "Resources to find coordinates", "text": "<ul> <li>Google Maps: Right-click on the location and select \u201cWhat\u2019s here?\u201d to get the coordinates. Google Maps</li> <li>OpenStreetMap: Right-click on the location and select \u201cShow address\u201d to get the coordinates. OpenStreetMap</li> <li>Get Lat Long: Enter the address to get the coordinates. GetLatLong</li> </ul> <p>What is a geographic coordinate?</p> <p>A coordinate is a set of numbers that specifies the location of a point on the Earth\u2019s surface. Coordinates are usually given in latitude and longitude, which are measured in degrees. Latitude specifies the north-south position, while longitude specifies the east-west position.</p> <p>One way to remember the difference between latitude and longitude is to think of the alphabet. Latitude comes first, just like the letter \u201cA,\u201d and it specifies the north-south position. Longitude comes second, just like the letter \u201cB,\u201d and it specifies the east-west position.</p> <p>My personal way to remember the difference is that latitude goes north to south like altitude goes up and down, while longitude goes east to west like long things going across left to right.</p> <p>Reversed Coordinates</p> <p>In MapLibreGL, the order of coordinates is <code>[lng, lat]</code>, which is the opposite of the usual <code>[lat, lng]</code> order. Make sure to use the correct order when adding markers to your map.</p>"}, {"location": "labs/week1b/1/#in-class-exercise-1", "title": "\u26bd In-Class Exercise #1", "text": "<p>Task</p> <ol> <li>Can you shorten the code, by replacing the <code>longitude</code> and <code>latitude</code> variables inside of the <code>setLngLat</code> function with the coordinates of your favorite place?</li> </ol> <p>(click to reveal solution)</p> Solution <pre><code>// Add a marker to the map\nconst marker = new maplibregl.Marker()\n    .setLngLat([-118.45, 34.05])\n    .addTo(map);\n</code></pre>"}, {"location": "labs/week1b/1/#optional-styling-popups", "title": "Optional: Styling Popups", "text": "<p>Remember you can add popups to your markers in MapLibreGL using the following code snippet:</p> <pre><code>// Add a marker to the map\nconst marker = new maplibregl.Marker()\n    .setLngLat([-118.45, 34.05])\n    .setPopup(new maplibregl.Popup({ offset: 25 }) // Add popups\n    .setHTML('Hello! This is an HTML popup, meaning I can add any &lt;tags&gt; I want here! Just be sure to close them &lt;/tags&gt;'))\n    .addTo(map);\n</code></pre> <p>Let\u2019s add a class to the popup to style it. The following code snippet shows how to add a class to the popup:</p> <pre><code>// Add a marker to the map\nconst marker = new maplibregl.Marker()\n    .setLngLat([-118.45, 34.05])\n    .setPopup(new maplibregl.Popup({ offset: 25 }) // Add popups\n    .setHTML('&lt;div class=\"awesomePopup\"&gt;Hello! This is an HTML popup, meaning I can add any &lt;tags&gt; I want here! Just be sure to close them &lt;/tags&gt;&lt;/div&gt;'))\n    .addTo(map);\n</code></pre> <p>In this code snippet, the <code>awesomePopup</code> class is added to the popup. You can then style the popup using CSS. For example, you can change the background color, font size, and padding of the popup.</p>"}, {"location": "labs/week1b/1/#in-class-exercise-2", "title": "\u26bd In-Class Exercise #2", "text": "<p>Task</p> <ol> <li>Can you style the popup using CSS?</li> </ol> <p>(click to reveal solution)</p> Solution <pre><code>.awesomePopup {\n    background-color: #f8f9fa;\n    color: #212529;\n    font-size: 16px;\n    padding: 10px;\n}\n</code></pre>"}, {"location": "labs/week1b/1/#summary", "title": "Summary", "text": "<p>In this lab, you learned how to add markers and style popups in MapLibreGL. You can use this knowledge to enhance your maps and create interactive visualizations. Remember to practice adding markers and popups to your map to reinforce your understanding of the concepts.</p>"}, {"location": "labs/week1b/1/#checkpoint", "title": "\ud83c\udfc1Checkpoint", "text": "<ul> <li>You should now be able to add markers to your map in MapLibreGL.</li> <li>You should now be able to style popups in MapLibreGL with CSS.</li> </ul>"}, {"location": "labs/week1b/1/#check-your-work", "title": "Check your work", "text": "<p>Your code should look like this before moving on:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with MapLibreGl&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- MapLibreGL's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.css\" /&gt;\n\n        &lt;!-- MapLibreGL's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                &lt;img src=\"me.png\"&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;/main&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: [ -118.444, 34.0709], // Starting position [lng, lat]\n    zoom: 15 // Starting zoom level\n});\n\n// Add a marker to the map\nnew maplibregl.Marker()\n    .setLngLat([ -118.444, 34.0709])\n    .setPopup(new maplibregl.Popup({ offset: 25 }) // Add popups\n        .setHTML('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I used to work in '))\n    .addTo(map);\n</code></pre> styles/style.css<pre><code>* {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    background-color: aqua;\n}\n\nhtml, body {\n    height: 80vh;\n    padding: 1rem;\n    box-sizing: border-box;\n}\n\nbody {\n    display: grid;\n    grid-template-areas: \n        \"header\"\n        \"main\"\n        \"footer\";\n    grid-template-rows: auto 1fr auto;\n}\n\nmain {\n    display: grid;\n    grid-template-areas:\n        \"portfolio map\";\n    grid-template-columns: 1fr 1fr;\n}\n\nheader { \n    grid-area: header;\n}\n\nmain { \n    grid-area: main;\n}\n\n.portfolio {\n    grid-area: portfolio;\n}\n\n#map { \n    grid-area: map;\n    height: 80vh;\n}\n\nfooter { \n    grid-area: footer;\n}\n</code></pre>"}, {"location": "labs/week1b/2/", "title": "Styling your portfolio", "text": "<p>Starting with last week\u2019s HTML and adding some list elements:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with MapLibreGl&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- MapLibreGL's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.css\" /&gt;\n\n        &lt;!-- MapLibreGL's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                &lt;img src=\"me.png\"&gt;\n                &lt;h2&gt;Where I work&lt;/h2&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;Los Angeles Metro&lt;/li&gt;\n                    &lt;li&gt;UCLA&lt;/li&gt;\n                    &lt;li&gt;Yindee Games&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;/main&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>With the current CSS:</p> styles/style.css<pre><code>* {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    background-color: aqua;\n}\n\nhtml, body {\n    height: 80vh;\n    padding: 1rem;\n    box-sizing: border-box;\n}\n\nbody {\n    display: grid;\n    grid-template-areas: \n        \"header\"\n        \"main\"\n        \"footer\";\n    grid-template-rows: auto 1fr auto;\n}\n\nmain {\n    display: grid;\n    grid-template-areas:\n        \"portfolio map\";\n    grid-template-columns: 1fr 1fr;\n}\n\nheader { \n    grid-area: header;\n}\n\nmain { \n    grid-area: main;\n}\n\n.portfolio {\n    grid-area: portfolio;\n}\n\n#map { \n    grid-area: map;\n    height: 80vh;\n}\n\nfooter { \n    grid-area: footer;\n}\n</code></pre>"}, {"location": "labs/week1b/2/#footerror-from-last-week", "title": "Footerror from last week", "text": "<p>Last week, I created the <code>footer</code> as an ID within the HTML, but I selected the footer in the CSS with no ID or class selector, like this:</p> styles/style.css<pre><code>footer { \n    grid-area: footer;\n}\n</code></pre> <p>This is a problem because the CSS will not apply to the footer. To fix this, we need to add an ID selector to the footer in the CSS:</p> styles/style.css<pre><code>#footer {\n    grid-area: footer;\n}\n</code></pre>"}, {"location": "labs/week1b/2/#styling-the-portfolio", "title": "\ud83c\udfa8 Styling the Portfolio", "text": "<p>Now with that addressed, the styling while editing the portfolio is a bit off. As in literally, the bullet points are off to the side of the portfolio box!</p>"}, {"location": "labs/week1b/2/#not-a-padding-idea", "title": "Not a pad(ding) idea!", "text": "<p>Michelle addressed this by suggesting to add a <code>padding-left</code> to the <code>ul</code> element in the CSS, which is a great simple solution:</p> styles/style.css<pre><code>ul {\n    padding-left: 30px;\n}\n</code></pre> <p>What this does is give a padding to the left side of all list elements (<code>ol</code>). </p> <p>But since we are using CSS Grid, we can make this responsive by adding some properties to the <code>.portfolio</code> class:</p> styles/style.css<pre><code>.portfolio {\n    grid-area: portfolio;\n    display: flex; /* This will make the items inside the portfolio flex items */\n    flex-direction: column; /* This can be row if you want the items to be side by side */\n    justify-content: center; /* This can be flex-start, flex-end, space-between, space-around, space-evenly */\n    align-items: center; /* This can be flex-start, flex-end, stretch, baseline */\n}\n</code></pre> <p>What the <code>flex</code>?!</p> <p>Flex is short for <code>flexible box layout</code> and it is the pre-cursor to CSS grid in that where CSS grid is a 2D layout, flex is a 1D layout. Flex is used to layout items in a container, distributing space among items in a way that makes the most sense. Read more on MDN here: CSS Flexbox</p> <p>Alright, regardless of which method you use, your portfolio should look a lot better now! Now as for that pesky footer\u2026</p>"}, {"location": "labs/week1b/2/#in-class-exercise-3", "title": "\u26bd In-Class Exercise #3", "text": "<ol> <li>Add some styles (like <code>padding</code> or <code>margin</code>) to the <code>footer</code> CSS</li> </ol> <p>(click to see the solution)</p> styles/style.css<pre><code>#footer {\n    grid-area: footer;\n    padding: 1rem;\n    background-color: #4677a0; /* Sets a darker background for contrast */\n    color: #fff; /* Ensures text is readable against the dark background */\n    text-align: center; /* Centers the footer content */\n}\n</code></pre> <p>With that exercise complete, you should now have a much more visually appealing portfolio page!</p>"}, {"location": "labs/week1b/2/#checkpoint", "title": "\ud83c\udfc1Checkpoint", "text": "<ul> <li>You should now have a styled portfolio with a list of places you have worked.</li> <li>You should now have a better styled bullet list and footer.</li> </ul> <p>Your code should look like this:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with MapLibreGl&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- MapLibreGL's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.css\" /&gt;\n\n        &lt;!-- MapLibreGL's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                 &lt;img src=\"me.png\"&gt;\n                 &lt;h2&gt;Where I work&lt;/h2&gt;\n                 &lt;ul&gt;\n                     &lt;li&gt;Los Angeles Metro&lt;/li&gt;\n                     &lt;li&gt;UCLA&lt;/li&gt;\n                     &lt;li&gt;Yindee Games&lt;/li&gt;\n                 &lt;/ul&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;/main&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: [ -118.444, 34.0709], // Starting position [lng, lat]\n    zoom: 15 // Starting zoom level\n});\n\n// Add a marker to the map\nnew maplibregl.Marker()\n    .setLngLat([ -118.444, 34.0709])\n    .setPopup(new maplibregl.Popup({ offset: 25 }) // Add popups\n        .setHTML('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I used to work in '))\n    .addTo(map);\n</code></pre> styles/style.css<pre><code>* {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    background-color: aqua;\n}\n\nhtml, body {\n    height: 80vh;\n    padding: 1rem;\n    box-sizing: border-box;\n}\n\nbody {\n    display: grid;\n    grid-template-areas: \n        \"header\"\n        \"main\"\n        \"footer\";\n    grid-template-rows: auto 1fr auto;\n}\n\nmain {\n    display: grid;\n    grid-template-areas:\n        \"portfolio map\";\n    grid-template-columns: 1fr 1fr;\n}\n\nheader { \n    grid-area: header;\n}\n\nmain { \n    grid-area: main;\n}\n\n.portfolio {\n    grid-area: portfolio;\n    display: flex; /* This will make the items inside the portfolio flex items */\n    flex-direction: column; /* This can be row if you want the items to be side by side */\n    justify-content: center; /* This can be flex-start, flex-end, space-between, space-around, space-evenly */\n    align-items: center; /* This can be flex-start, flex-end, stretch, baseline */\n}\n\n#map { \n    grid-area: map;\n    height: 80vh;\n}\n\n#footer {\n    grid-area: footer;\n    padding: 1rem;\n    background-color: #4677a0; /* Sets a darker background for contrast */\n    color: #fff; /* Ensures text is readable against the dark background */\n    text-align: center; /* Centers the footer content */\n}\n\n/* nice solution for adding a padding for the bullet points! */\n/* ol {\n    padding-left: 30px;\n} */\n</code></pre>"}, {"location": "labs/week1b/3/", "title": "\u2705 Final Template Code", "text": "index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with MapLibreGl&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- MapLibreGL's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.css\" /&gt;\n\n        &lt;!-- MapLibreGL's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                 &lt;img src=\"me.png\"&gt;\n                 &lt;h2&gt;Where I work&lt;/h2&gt;\n                 &lt;ul&gt;\n                     &lt;li&gt;Los Angeles Metro&lt;/li&gt;\n                     &lt;li&gt;UCLA&lt;/li&gt;\n                     &lt;li&gt;Yindee Games&lt;/li&gt;\n                 &lt;/ul&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;/main&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: [ -118.444, 34.0709], // Starting position [lng, lat]\n    zoom: 15 // Starting zoom level\n});\n\n// Add a marker to the map\nnew maplibregl.Marker()\n    .setLngLat([ -118.444, 34.0709])\n    .setPopup(new maplibregl.Popup({ offset: 25 }) // Add popups\n        .setHTML('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I used to work in '))\n    .addTo(map);\n</code></pre> styles/style.css<pre><code>* {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    background-color: aqua;\n}\n\nhtml, body {\n    height: 80vh;\n    padding: 1rem;\n    box-sizing: border-box;\n}\n\nbody {\n    display: grid;\n    grid-template-areas: \n        \"header\"\n        \"main\"\n        \"footer\";\n    grid-template-rows: auto 1fr auto;\n}\n\nmain {\n    display: grid;\n    grid-template-areas:\n        \"portfolio map\";\n    grid-template-columns: 1fr 1fr;\n}\n\nheader { \n    grid-area: header;\n}\n\nmain { \n    grid-area: main;\n}\n\n.portfolio {\n    grid-area: portfolio;\n    display: flex; /* This will make the items inside the portfolio flex items */\n    flex-direction: column; /* This can be row if you want the items to be side by side */\n    justify-content: center; /* This can be flex-start, flex-end, space-between, space-around, space-evenly */\n    align-items: center; /* This can be flex-start, flex-end, stretch, baseline */\n}\n\n#map { \n    grid-area: map;\n    height: 80vh;\n}\n\n#footer {\n    grid-area: footer;\n    padding: 1rem;\n    background-color: #4677a0; /* Sets a darker background for contrast */\n    color: #fff; /* Ensures text is readable against the dark background */\n    text-align: center; /* Centers the footer content */\n}\n</code></pre>"}, {"location": "labs/week2/", "title": "JavaScript Writing some FUNctions", "text": "<p>Creating our first map with MapLibre GL learning to use JavaScript!</p> <p></p> <p>Goals</p> <ul> <li>Understand how JavaScript works with HTML and CSS</li> <li>Understand how JavaScript variables, functions, methods work together</li> </ul>", "tags": ["Lab 2"]}, {"location": "labs/week2/#lab-outline", "title": "Lab outline", "text": "<ol> <li>JavaScript Functions</li> <li>Adding Event Listeners</li> </ol>", "tags": ["Lab 2"]}, {"location": "labs/week2/#starting-template-code-for-lab-2", "title": "Starting Template Code for lab #2", "text": "<p>Use the following template code or your lab assignment #1:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with MapLibreGl&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- MapLibreGL's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.css\" /&gt;\n\n        &lt;!-- MapLibreGL's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                 &lt;img src=\"me.png\"&gt;\n                 &lt;h2&gt;Where I work&lt;/h2&gt;\n                 &lt;ul&gt;\n                     &lt;li&gt;Los Angeles Metro&lt;/li&gt;\n                     &lt;li&gt;UCLA&lt;/li&gt;\n                     &lt;li&gt;Yindee Games&lt;/li&gt;\n                 &lt;/ul&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;/main&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: [ -118.444, 34.0709], // Starting position [lng, lat]\n    zoom: 15 // Starting zoom level\n});\n\n// Add a marker to the map\nnew maplibregl.Marker()\n    .setLngLat([ -118.444, 34.0709])\n    .setPopup(new maplibregl.Popup({ offset: 25 }) // Add popups\n        .setHTML('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I used to work in '))\n    .addTo(map);\n</code></pre> styles/style.css<pre><code>* {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    background-color: aqua;\n}\n\nhtml, body {\n    height: 80vh;\n    padding: 1rem;\n    box-sizing: border-box;\n}\n\nbody {\n    display: grid;\n    grid-template-areas: \n        \"header\"\n        \"main\"\n        \"footer\";\n    grid-template-rows: auto 1fr auto;\n}\n\nmain {\n    display: grid;\n    grid-template-areas:\n        \"portfolio map\";\n    grid-template-columns: 1fr 1fr;\n}\n\nheader { \n    grid-area: header;\n}\n\nmain { \n    grid-area: main;\n}\n\n.portfolio {\n    grid-area: portfolio;\n    display: flex; /* This will make the items inside the portfolio flex items */\n    flex-direction: column; /* This can be row if you want the items to be side by side */\n    justify-content: center; /* This can be flex-start, flex-end, space-between, space-around, space-evenly */\n    align-items: center; /* This can be flex-start, flex-end, stretch, baseline */\n}\n\n#map { \n    grid-area: map;\n    height: 80vh;\n}\n\n#footer {\n    grid-area: footer;\n    padding: 1rem;\n    background-color: #4677a0; /* Sets a darker background for contrast */\n    color: #fff; /* Ensures text is readable against the dark background */\n    text-align: center; /* Centers the footer content */\n}\n</code></pre>", "tags": ["Lab 2"]}, {"location": "labs/week2/1/", "title": "JavaScript FUNctions", "text": "<p>Before we dive into functions, we need to talk a little more about JavaScript variables, because functions will often use or output variables!</p>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#reminder-variable-definitions", "title": "Reminder: <code>variable</code> definitions", "text": "<p>What we really need to understand about variables is that they act like boxes where you can store or take information out of. - <code>const</code> acts like a locked safe that will not let you put anything into it after you define it - <code>let</code> is like a regular box that can be opened and closed, but only one thing can be stored in it at a time- if you put something new in it, the old thing is replaced -  <code>var</code> is <code>VARy</code> problematic because it can be both locked and unlocked</p> <p>Objects are a collection of variables that can be of different types.</p> <p>Here are some of the types in JavaScript:</p> <pre><code>//number\nlet box1 = 5;\nlet box2 = 5.0;\n\n//string\nlet box3 = 'five';\nlet box4 = \"five\";\n\n// string literal, uses backticks and ${variable} to bring in another variable\nlet box5 = `this is from box #4: ${box4}`;\n\n// array (also known as a list)\nlet box6 = [1,2,3,4,5]; \n\n// object, stores variables together, can be of different types!\nlet box7 = {\"number\": 'five', \"value\":5};\n\n// boolean (true or false)\nlet box8 = true;\n\n// null value\nlet emptyBox;\n</code></pre> <p>Remember, to declare a variable (give it a value) you must use the  <code>=</code> symbol, like so:</p> <pre><code>let my_variable = \"exist!\";\n</code></pre> <p>Anatomy of a variable declaration</p> <ul> <li><code>let</code> is the keyword declaration of a variable</li> <li><code>my_variable</code> is the variable\u2019s name</li> <li><code>\"exist!\"</code> is the value for this variable</li> <li><code>;</code> defines the end of a line in JavaScript </li> </ul> <p>Let\u2019s warm up by using making variables in our <code>init.js</code> file.</p> js/init.js<pre><code>// original code\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets-v2-light/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: [-118.4430,34.0691], // Starting position [lng, lat]\n    zoom: 15 // Starting zoom level\n});\n\nnew maplibregl.Marker()\n    .setLngLat([ -118.444, 34.0709])\n    .setPopup(new maplibregl.Popup({ offset: 25 }) // Add popups\n        .setHTML('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I used to work in '))\n    .addTo(map);\n\n// adding markers\nlet ucla;\nlet metro;\nlet games;\n</code></pre> <p>Unique variable names</p> <p>When you create new marker variables, you must give the marker variable a new name, like <code>marker2</code> or you will simply override the previous marker!  </p>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#time-for-functions", "title": "Time for FUNctions", "text": "<p>What if I told you, you\u2019ve already been using functions? </p> <p>Remember when we used <code>.setLngLat()</code> and <code>.addTo()</code> in <code>Marker</code>:</p> <pre><code>new maplibregl.Marker()\n    .setLngLat([ -118.444, 34.0709])\n    .setPopup(new maplibregl.Popup({ offset: 25 }) // Add popups\n        .setHTML('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I used to work in '))\n    .addTo(map);\n</code></pre> <p>Those are functions!</p>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#what-is-a-function", "title": "What is a function?", "text": "<p>A function is a block of code that can be reused and called multiple times.</p> <p>In the example above, <code>.setLngLat()</code> and <code>.addTo()</code> are functions that belong to the <code>maplibregl.Marker</code> class.</p> <p>Why is <code>Marker</code> capitalized? Because it is a class! </p>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#classes-vs-functions", "title": "Classes vs Functions", "text": "<p>Classes and functions are similar, but they are not the same. A <code>class</code> is basically a template for creating objects, that can have properties (variables) and methods (functions) that belong to it.</p> <p>The <code>new</code> keyword is used to make a new object from a class.</p> <p>This is why we use <code>new maplibregl.Marker()</code> to create a new marker or <code>new maplibregl.Map()</code> to create a new map.</p> <p>the <code>.</code> is used to access the methods, like <code>.setLngLat()</code> and <code>.addTo()</code>. Remember that methods just stands for a function that is a part of a class- in this case the <code>maplibregl</code>\u2019s <code>Marker</code> class.</p>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#a-method-to-my-madness", "title": "A method to my madness?!", "text": "<p>Variables also have built-in functions (also called a <code>method</code>!!!!)</p> <p>For example, <code>string</code>-type variables have <code>methods</code> for changing the string, like <code>.toUpperCase()</code> making all the letters <code>UPPERCASE</code> or <code>.split()</code> splitting a character based on a <code></code>. To access a method, you use the <code>.</code> after the variable has been declared as that type.</p> <p>Calling methods for what they are <code>()</code></p> <p>Since <code>methods</code> are functions, you must call them in the same way with the <code>()</code> at the end. This is because some <code>methods</code> have parameters you can fill in.</p> <p>A helping <code>console</code> hand!</p> <p>You can check what methods are available right in Firefox\u2019s web developer console! Most modern web browsers have this feature as well.</p> <p>To give this a try, copy and paste this right into your web browser and see what happens!</p> <pre><code>let myString = \"hi, this is a test string\"\nlet divideBySpace = myString.split(\" \")\nconsole.log(divideBySpace) \n</code></pre> Did you get this response? <p><code>result: Array(6) [ \"hi,\", \"this\", \"is\", \"a\", \"test\", \"string\" ]</code> </p> <p>If you did, yay! This is an array (list), of 6 strings!</p>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#in-class-exercise-1-what-other-methods-are-available", "title": "\u26bdIn-class Exercise #1 - What other methods are available?", "text": "<p>As with all languages, learning to look-up things is important to expand what you can say and do!  The following is a table of where you can find some methods:</p> Location Type MDN Strings W3 Strings W3 Numbers W3 Arrays W3 Objects <p>Tasks</p> <ol> <li>Visit one of the links above or search online to find other methods.</li> <li>Get the result to display in your console.</li> <li>Bonus: read the next section try to <code>chain</code> multiple <code>methods</code> together.</li> </ol> Answer <p>Here is an example of an uppercase method:</p> <pre><code>let myString = \"hi, this is a test string\"\nlet divideBySpace = myString.toUpperCase()\nconsole.log(divideBySpace) \n</code></pre> <p>Result:</p> <p><code>\"HI, THIS IS A TEST STRING\"</code></p>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#method-chaining", "title": "Method chaining", "text": "<p>In JavaScript whenever you see a <code>.</code> after a parenthesis<code>()</code>,it means you are chaining a function to follow it. </p> <p>For example:</p> <pre><code>let myString = \"hi this is a test string\"\nlet divideBySpace = myString.toUpperCase().split(\" \")\nconsole.log(divideBySpace)\n</code></pre> <p>The output should look a little bit different than last time thanks to the <code>toUpperCase()</code> method!</p> Output <p><code>Array(6) [ \"HI\", \"THIS\", \"IS\", \"A\", \"TEST\", \"STRING\" ]</code></p> <p>Let\u2019s add this code to our init.js and can you see where the chaining is happening?</p> js/init.js<pre><code>// adding markers\nlet ucla = new maplibregl.Marker()\n    .setLngLat([-118.444, 34.0709])\n    .setPopup(new maplibregl.Popup()\n        .setHTML('Where I work on campus'))\n    .addTo(map)\n</code></pre> <p>It is happening 4 times in this code! Can you identify which chains are associated with which class?</p> <p> Answer <p><code>.setLngLat()</code> and <code>.setPopup()</code> <code>.addTo()</code>, are methods of the <code>Marker</code> class, while <code>.setHTML()</code> is a method of the <code>Popup</code> class. </p>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#focusing-on-functions", "title": "Focusing on Functions", "text": "<p>Programmers are often programming because they have to get something done, but a true programmer likes to automate (as well as copy and paste) when pre-existing functions don\u2019t do what they want.</p> <p>So, instead of using built-in functions, like with MapLibre\u2019s <code>.setLngLat()</code> or methods like <code>.toUpperCase()</code>, we can create our own functions!</p> <p>Add 2 more markers to your <code>init.js</code>:</p> <pre><code>let metro = new maplibregl.Marker()\n    .setLngLat([-118.234, 34.056])\n    .setPopup(new maplibregl.Popup()\n        .setHTML('Where I work at Metro'))\n    .addTo(map)\n\nlet games = new maplibregl.Marker()\n    .setLngLat([-118.234, 34.056])\n    .setPopup(new maplibregl.Popup()\n        .setHTML('Where I work at games'))\n    .addTo(map)\n</code></pre> <p>Your <code>init.js</code> should look like this:</p> js/init.js<pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets-v2-light/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: [-118.4430,34.0691], // Starting position [lng, lat]\n    zoom: 15 // Starting zoom level\n});\n\n// adding markers\nlet ucla = new maplibregl.Marker()\n    .setLngLat([-118.444, 34.0709])\n    .setPopup(new maplibregl.Popup()\n        .setHTML('Where I work on campus'))\n    .addTo(map)\n\nlet metro = new maplibregl.Marker()\n    .setLngLat([-118.234, 34.056])\n    .setPopup(new maplibregl.Popup()\n        .setHTML('Where I work at Metro'))\n    .addTo(map)\n\nlet games = new maplibregl.Marker()\n    .setLngLat([-118.234, 34.056])\n    .setPopup(new maplibregl.Popup()\n        .setHTML('Where I work at games'))\n    .addTo(map)\n</code></pre> <p>Would it be cumbersome to add 10 points like this? What about 100? 1,000?</p> <p>That\u2019s where functions come in handy!</p>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#our-first-new-function", "title": "Our first new function!", "text": "<p>Functions are declared like variables by a keyword, however instead of <code>let</code>, <code>const</code>, or <code>var</code> we use the keyword\u2026 <code>function</code>, what FUNCTIONal keyword!</p> <p>A basic function looks likes this:</p> <pre><code>function our_first(){\n    // do something\n}\n</code></pre>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#functions-with-parameters", "title": "Functions with Parameters", "text": "<p>Functions can also take in parameters. Parameters are like variables that are passed into the function. </p> <pre><code>function brand_new_one(parameter1,parameter2){\n    // do something\n    console.log(\"Parameter 1 is: \" + parameter1, \"and Parameter 2 is: \" + parameter2)\n}\n</code></pre> <p>In this example, <code>parameter1</code> and <code>parameter2</code> are the parameters of the function. Now let\u2019s open up the console and see what happens!</p> <p>Go ahead and check the console!</p> <p>WHAT?! Nothing has changed! </p> <p>That\u2019s because we haven\u2019t called the function yet!</p>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#call-for-one-and-one-for-call-ing-a-function", "title": "Call for one and one for call-ing a function!", "text": "<p>In order for a function to run, it needs to be used! This is called \u201cinvoking\u201d or \u201ccalling\u201d the function. When a function has no parameters, you can call it like so:</p> <pre><code>    our_first()\n</code></pre> <p>When it has parameters, you must pass in the parameters like so:</p> <pre><code>    brand_new_one(parameter1,parameter2)\n</code></pre> <p>Go ahead and call either of the functions, and you should see the console log the message so up!</p> <p>Here is how it may look (just an example):</p> <pre><code>function brand_new_one(parameter1,parameter2){\n    // do something\n    console.log(\"Parameter 1 is: \" + parameter1, \"and Parameter 2 is: \" + parameter2)\n}\n\nbrand_new_one('hello','1')\n</code></pre>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#creating-a-marker-function", "title": "<code>creating a marker</code> function", "text": "<p>Let\u2019s apply to creating a marker!</p> <p>We know from the documentation and our previous usage that <code>.setLngLat()</code>, needs <code>latitude</code> and <code>longitude</code>, and it is stored in an array like this <code>[]</code>. So, we can automate the marker creation by creating a function like this:</p> js/init.js<pre><code>function addMarker(lat,lng,message){ //(1)!\n    console.log(message) //(2)!\n    maplibregl.Marker() //(3)!\n        .setLngLat([lng, lat]) //(5)!\n        .setPopup(new maplibregl.Popup()\n            .setHTML(popup_message)) //(7)!\n        .addTo(map) //(6)!\n    return message //(4)!\n}\n</code></pre> <ol> <li><code>function</code> is the declaration of our function, <code>addMarker</code> is the name, and <code>lat,lng,message</code> is the parameter, which are passed in to a function to be utilized. <code>Parameters</code> are optional, but parentheses <code>()</code> are not!! The <code>{</code> is the begining of the function.</li> <li>The <code>console.log</code> in the body will tell us if the function is working.</li> <li>Here we use the <code>maplibregl.Marker()</code> to create a new marker.</li> <li>The return is used to exit a function and return a value. </li> <li>We use the <code>setLngLat</code> method to set the latitude and longitude of the marker. Notice we flipped lng to be first and lat to be second because that\u2019s what the <code>setLngLat</code> method expects.</li> <li>The <code>addTo</code> method adds the marker to the map.</li> <li>The <code>bindPopup</code> method adds a popup to the marker.</li> </ol> Why did we include a third parameter called <code>message</code>? <p>It allows us to customize our popups!</p> <p>Notice how the how function accesses our parameters: - <code>.setLngLat([lng, lat])</code> uses <code>lng</code>,<code>lat</code> - <code>.bindPopUp</code> uses <code>message</code></p> <p>Function parameters</p> <p>You can pass in variables into functions and multiple parameters are seperated by a comma. In this function, there are 3 parameters: <code>(lat,lng,message)</code>. Remember that if you even if you have NO parameters, you must include the parenthesis <code>()</code> like follows: - <code>js#! function our_first_function(){return \"hello world\"}</code></p> <p>But since our function does have parameters (namely the <code>lat</code>,<code>lng</code>,and <code>message</code>), you must specify what those are when you call the function.</p> <p>Add this to the end of our <code>init.js</code> file:</p> <p>js/init.js <pre><code>    addMaker(37,-122,'you are awesome! you automated a marker function')\n</code></pre></p> <p>Warning about the order of parameters!</p> <p>The order of the parameters (<code>lat</code>,<code>lng</code>,<code>message</code>) is must be in the SAME order that the function reads them!! Try swapping the <code>37</code> and <code>-122</code> to see what I mean.</p> <p>Now your console should return the \u201cmessage\u201d AND you should see a new marker on the map!</p> <p>Inside <code>function</code> blocks you can create variables, change HTML, and do all sorts of things like play videos and even design games using them!</p>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#class-exercise-2-using-the-marker-function", "title": "\u26bdClass Exercise #2 - Using the marker function", "text": "<p>Create your own marker function that does the following:</p> <ul> <li>Utilizes at least <code>four parameters</code></li> <li>Declare a <code>new variable</code> inside the function </li> <li><code>Returns</code> a value (<code>return</code> values are optional, but can be used to exit a function and return/output a value.)</li> </ul> <p>Use your function to create 3 markers with it.</p> Check <pre><code>    // create a function\n    function addMarker(lat,lng,title,message){\n        console.log(message)\n        new maplibregl.Marker()\n            .setLngLat([lng, lat])\n            .setPopup(new maplibregl.Popup()\n                .setHTML(popup_message))\n            .addTo(map)\n        return message\n    }\n\n    // use the function\n    addMarker(34.070,-118.444, \"UCLA\", \"Where I work on campus\")\n    addMarker(34.056,-118.234, \"Metro\", \"Where I work at Metro\")\n    addMarker(34.056,-118.234, \"Games\", \"Where I work at games\")\n</code></pre> <p>If you finished early, try these extra challenges:</p> <ul> <li>Try to style your pop-up with 2 attributes!</li> </ul> <p>Bonus Exercise - Create your own function</p> <p>Create your own function that does the following:</p> <ul> <li>Utilizes at least <code>two parameters</code></li> <li>Declare a <code>new variable</code> inside the function </li> <li><code>Returns</code> a value</li> </ul> Bonus Answer <pre><code>    // create function\n    function addNumbers(value1,value2){\n        let result = value1 + value2\n        return result\n    }\n\n    // use the function\n    addNumbers(1,10)   // result: 11\n</code></pre>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#combining-strings", "title": "Combining Strings", "text": "<p>We can combine strings with the <code>+</code> operator. For example:</p> <pre><code>let zoomLevel = 10\nlet popup = 'The zoom level is ' + zoomLevel\n</code></pre>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#side-note-string-literals", "title": "Side note: String Literals", "text": "<p>String literals or template strings allow you to subsitute variables into strings with the <code>${VARIABLE_NAME}</code> syntax inside the place holders.</p> <p>Declaring a string with ` instead of <code>'</code> <code>'</code> or <code>\" \"</code>, allows you to convert <code>variables</code> to strings. </p> <p>This technique will be helpful for our pop-ups as follows:</p> <pre><code>// creating a function\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    maplibregl.Marker()\n        .setLngLat([lng, lat])\n        .addTo(map)\n        .bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`)\n    return message\n}\n</code></pre> <ol> <li>Notice how <code>title</code> is added to the <code>&lt;h2&gt;</code> tag element and <code>message</code> is added to an <code>&lt;h3&gt;</code> element?</li> </ol> <p>Alternative Method</p> <p>You can also bundle the pop-up into a variable, and then use that to populate the <code>bindPopup()</code> call: </p> <pre><code>// creating a function\nfunction addMarker(lat,lng,title,message){\n    let popup_message = `&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`\n    maplibregl.Marker()\n        .setLngLat([lng, lat])\n        .addTo(map)\n        .bindPopup(popup_message)\n    return message\n}\n</code></pre>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/1/#checkpoint", "title": "\ud83c\udfc1 Checkpoint", "text": "<ul> <li>You should have a function that creates markers on the map</li> <li>You should have a function that takes in parameters</li> </ul> <p>Your code should look like this:</p> js/init.js<pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets-v2-light/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: [-118.4430,34.0691], // Starting position [lng, lat]\n    zoom: 15 // Starting zoom level\n});\n\nfunction addMarker(lat,lng,title,message){\n    let popup_message = `&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`\n    new maplibregl.Marker()\n        .setLngLat([lng, lat])\n        .setPopup(new maplibregl.Popup().setHTML(popup_message))\n        .addTo(map)\n\n    return message\n}\n\naddMarker(34.070,-118.444, \"UCLA\", \"Where I work on campus\")\naddMarker(34.056,-118.234, \"Metro\", \"Where I work at Metro\")\naddMarker(34.056,-118.234, \"Games\", \"Where I work at games\")\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with MapLibreGl&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- MapLibreGL's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.css\" /&gt;\n\n        &lt;!-- MapLibreGL's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                 &lt;h2&gt;Where I work&lt;/h2&gt;\n                 &lt;ul&gt;\n                     &lt;li&gt;Los Angeles Metro&lt;/li&gt;\n                     &lt;li&gt;UCLA&lt;/li&gt;\n                     &lt;li&gt;Yindee Games&lt;/li&gt;\n                 &lt;/ul&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;/main&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> styles/style.css<pre><code>/* Global reset to ensure consistency across browsers */\n* {\n    font-family: Arial, sans-serif; /* Sets a default font for the whole page */\n    margin: 0; /* Removes default margins */\n    padding: 0; /* Removes default padding */\n    box-sizing: border-box; /* Makes sure borders and paddings are included in the element's total width and height */\n}\n\n/* Sets the background color of the whole page and ensures content fits the screen height */\nhtml {\n    background-color: aqua; /* Sets a light blue background color */\n}\n\n/* Applies to both &lt;html&gt; and &lt;body&gt; */\nhtml, body {\n    height: 80vh; /* Sets the height to 80% of the viewport height, making sure the content fits on the screen */\n    padding: 1rem; /* Adds a bit of space around the content for better readability */\n    box-sizing: border-box; /* Ensures padding does not add to the set height */\n}\n\n/* Defines the main layout of the page using CSS Grid */\nbody {\n    display: grid; /* Enables CSS Grid layout */\n    grid-template-areas: \n        \"header\" /* Top area for the header */\n        \"main\"   /* Middle area for the main content */\n        \"footer\"; /* Bottom area for the footer */\n    grid-template-rows: auto 1fr auto; /* Sizes: auto for header and footer to fit content, 1fr for main to fill remaining space */\n}\n\n/* Sets up the layout for the main content area, dividing it into two columns */\nmain {\n    display: grid; /* Enables CSS Grid within the main element */\n    grid-template-areas:\n        \"portfolio map\"; /* Divides the main area into portfolio and map sections side by side */\n    grid-template-columns: 1fr 1fr; /* Allocates equal width to both sections */\n}\n\n/* Grid area assignments for each major section, linking them to their respective areas in the grid */\nheader { \n    grid-area: header; /* Assigns the header to its grid area */\n}\n\nmain { \n    grid-area: main; /* Assigns the main content to its grid area */\n}\n\n.portfolio {\n    grid-area: portfolio;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n\n#map { \n    grid-area: map; /* Assigns the map section to its grid area */\n    height: 80vh; /* Sets the map's height to 80% of the viewport height */\n}\n\n#footer {\n    grid-area: footer;\n    padding: 5px; /* Adds padding for better spacing */\n    background-color: #4677a0; /* Sets a dark background for contrast */\n    color: #fff; /* Ensures text is readable against the dark background */\n    text-align: center; /* Centers the footer content */\n}\n</code></pre>", "tags": ["Lab 2", "JavaScript functions", "String literals"]}, {"location": "labs/week2/2/", "title": "Events in the Fire KingDOM", "text": "<p>Objective</p> <p>Make a button that we can click on to fly to a location for each of the markers you made.</p> <ol> <li> <p>Add a place for the buttons to go</p> </li> <li> <p>Create the function to add buttons to the <code>DOM</code> that also moves the map</p> </li> <li> <p>Call the new function in our <code>addMarker</code> function</p> </li> </ol>", "tags": ["Lab 3", "Buttons", "Events", "Event Listeners", "JavaScript"]}, {"location": "labs/week2/2/#the-htm-elements-avatag-the-last-airbender", "title": "The HTM-Elements: Ava<code>&lt;tag&gt;</code> the last Airbender", "text": "<p>Remember, when you see tags that have an <code>open</code> and <code>/end</code> in HTML, like <code>&lt;body&gt;&lt;/body&gt;</code>, they are referred to as elements, so for example: <pre><code>&lt;water&gt;Katara&lt;/water&gt; \n&lt;air&gt;Aang&lt;/air&gt; \n&lt;earth&gt;Toph&lt;/earth&gt; \n&lt;fire&gt;Zuko&lt;/fire&gt;\n</code></pre> Above we have four elements. Each element has a <code>content</code>, for example, the <code>earth</code> element\u2019s content is <code>Toph</code>. Unfortunately, despite how exciting those elements are, the most common HTML element is the <code>&lt;div&gt;&lt;/div&gt;</code> element, which is a generic container.</p> <p>This is not an element: <code>&lt;link&gt;</code> because there is not <code>/link</code> to close it.</p> <p>Elements can contain other elements, for example: <pre><code>&lt;kingdom&gt;\n    &lt;earth&gt;Toph&lt;/earth&gt;\n&lt;/kingdom&gt;\n</code></pre> Here <code>Toph</code> is inside the <code>earth</code> element, which is inside the <code>kingdom</code> element.</p> <p>Reminder that all tags can have attributes:</p> <pre><code>&lt;kingdom&gt;\n    &lt;earth attribute=\"valueForTheAttribute\"&gt;Toph&lt;/earth&gt;\n&lt;/kingdom&gt;\n</code></pre> <p>The <code>DOM</code> (Document Object Model) how HTML elements are treated as <code>objects</code> that can be manipulated by JavaScript. The <code>DOM</code> has an API (Application Programming Interface) with JavaScript is used to interact with the elements.</p> <p>The <code>DOM</code> is a tree structure, which means that the <code>document</code> is the root of the DOM tree, and all elements are children of the <code>document</code>.</p> <p>DOM Tree</p> <p>Just think of the <code>DOM</code> as the foundation of our <code>HTML</code> house and the <code>elements</code> are the rooms where we can use JavaScript appliances to interact with them. Anything outside the <code>&lt;html&gt;</code> element (i.e. after the <code>&lt;/html&gt;</code>) is not part of the <code>DOM</code> so you can\u2019t use JavaScript to access it.</p> <p>Creating elements in the <code>DOM</code>?!</p> <p>To create HTML elements with JavaScript you need to use the createElement method.</p>", "tags": ["Lab 3", "Buttons", "Events", "Event Listeners", "JavaScript"]}, {"location": "labs/week2/2/#add-a-place-for-the-buttons-to-go", "title": "Add a place for the buttons to go", "text": "", "tags": ["Lab 3", "Buttons", "Events", "Event Listeners", "JavaScript"]}, {"location": "labs/week2/2/#a-contents-container", "title": "A <code>contents</code> container", "text": "<p>Our buttons needs a place to go, so let\u2019s add a <code>&lt;div&gt;</code> with an ID called <code>contents</code> for our map.</p> <p><code>divs</code> vs. <code>spans</code>, what\u2019s the <code>DIV</code>fference?</p> <p><code>divs</code> are generic <code>HTML elements</code> that stand for <code>division</code> of content, you can think of them as boxes of content. <code>Spans</code> are like divs, but for text content. Check out Mozilla Developer Network for more information:</p> <ul> <li><code>elements</code></li> <li><code>divs</code></li> <li><code>spans</code> </li> </ul> <p>After the <code>&lt;div id=\"contents\"&gt;&lt;/div&gt;</code> element, add a new <code>&lt;div&gt;&lt;/div&gt;</code> element, and give it an ID attribute of <code>contents</code> like the follwing:</p> <p><pre><code>&lt;div id=\"contents\"&gt;&lt;/div&gt;\n</code></pre> And let\u2019s add it after our portfolio div:</p> <p>Our current <code>index.html</code> should look like the following:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with MapLibreGl&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- MapLibreGL's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.css\" /&gt;\n\n        &lt;!-- MapLibreGL's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;div id=\"contents\"&gt;&lt;/div&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                 &lt;h2&gt;Where I work&lt;/h2&gt;\n                 &lt;ul&gt;\n                     &lt;li&gt;Los Angeles Metro&lt;/li&gt;\n                     &lt;li&gt;UCLA&lt;/li&gt;\n                     &lt;li&gt;Yindee Games&lt;/li&gt;\n                 &lt;/ul&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;/main&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>", "tags": ["Lab 3", "Buttons", "Events", "Event Listeners", "JavaScript"]}, {"location": "labs/week2/2/#prepping-the-css", "title": "Prepping the CSS", "text": "<p>Let\u2019s incorporate our new <code>div</code> that has the <code>id</code> of<code>the_map</code> into our CSS now.</p> <p>Reminder: IDs vs. Classes</p> <ul> <li>IDs: There can only be ONE unique ID on a HTML page and in CSS you refer to it with a <code>#</code>, like <code>#the_map</code>.</li> <li>Classes: There can be multiple classes on an HTML page and in CSS you refer to it with a <code>.</code></li> </ul> styles/style.css<pre><code>#contents{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n}\n</code></pre>", "tags": ["Lab 3", "Buttons", "Events", "Event Listeners", "JavaScript"]}, {"location": "labs/week2/2/#create-the-function-to-add-buttons-and-move-the-map", "title": "Create the function to add buttons and move the map", "text": "<p>Next we will add our new function. Notice how we are using the <code>lat</code>,<code>lng</code>,and <code>title</code> from the <code>addMarker</code> function? That\u2019s why it was helpful to do step one first.</p> js/init.js<pre><code>function createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // (1)! \n    newButton.id = \"button\"+title; // (2)! \n    newButton.innerHTML = title; // (3)! \n    newButton.setAttribute(\"lat\",lat); // (4)! \n    newButton.setAttribute(\"lng\",lng); // (5)! \n    newButton.addEventListener('click', function(){\n        map.flyTo({\n            center: [lng,lat], //(6)!\n        })\n    })\n    document.getElementById(\"contents\").appendChild(newButton); //(7)! \n}\n</code></pre> <ol> <li>Creates a new button <code>element</code></li> <li>Gives the button a unique <code>id</code></li> <li>Gives the button a <code>title</code></li> <li>Sets the <code>latitude</code></li> <li>Sets the <code>longitude</code></li> <li>Tells MapLibre where to <code>flyTo()</code>, which is the longitude/latitude</li> <li>This targets the <code>id</code> where the buttons should be added to! In this case it is the div         with the id <code>contents</code>!</li> </ol>", "tags": ["Lab 3", "Buttons", "Events", "Event Listeners", "JavaScript"]}, {"location": "labs/week2/2/#call-the-createbuttons-in-our-addmarker-function", "title": "Call the <code>createButtons()</code> in our <code>addMarker</code> function", "text": "<p>Remember, the only way functions work is if they are called, so the last step is to call the <code>createButtons()</code> in our <code>addMarker()</code> function.</p> js/init.js<pre><code>function addMarker(lat,lng,title,message){\n    let popup_message = `&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`\n    maplibregl.Marker()\n        .setLngLat([lng, lat])\n        .addTo(map)\n        .bindPopup(popup_message)\n    createButtons(lat,lng,title);\n    return message\n}\n</code></pre> <ol> <li>This is the line that calls our <code>createButtons()</code> function!</li> </ol> <p>Try clicking the button on the webpage and it should fly to the location of that marker!</p>", "tags": ["Lab 3", "Buttons", "Events", "Event Listeners", "JavaScript"]}, {"location": "labs/week2/2/#final-checkpoint", "title": "\ud83c\udfc1 Final Checkpoint", "text": "<ul> <li>You should have a button that when clicked, moves the map to the location of the marker.</li> <li>You should have a button for each marker you have created.</li> </ul> <p>Your code should look like this: </p> js/init.js<pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets-v2-light/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: [-118.4430,34.0691], // Starting position [lng, lat]\n    zoom: 15 // Starting zoom level\n});\n\nfunction addMarker(lat,lng,title,message){\n    let popup_message = `&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`\n    new maplibregl.Marker()\n        .setLngLat([lng, lat])\n        .setPopup(new maplibregl.Popup()\n            .setHTML(popup_message))\n        .addTo(map)\n    createButtons(lat,lng,title);\n    return message\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // (1)! \n    newButton.id = \"button\"+title; // (2)! \n    newButton.innerHTML = title; // (3)! \n    newButton.setAttribute(\"lat\",lat); // (4)! \n    newButton.setAttribute(\"lng\",lng); // (5)! \n    newButton.addEventListener('click', function(){\n        map.flyTo({\n            center: [lng,lat], //(6)!\n        })\n    })\n    document.getElementById(\"contents\").appendChild(newButton); //(7)! \n}\n\naddMarker(34.070,-118.444, \"UCLA\", \"Where I work on campus\")\naddMarker(34.056,-118.234, \"Metro\", \"Where I work at Metro\")\naddMarker(34.059,-118.374, \"Games\", \"Where I work at games\")\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with MapLibreGl&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- MapLibreGL's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.css\" /&gt;\n\n        &lt;!-- MapLibreGL's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;div id=\"contents\"&gt;&lt;/div&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                 &lt;h2&gt;Where I work&lt;/h2&gt;\n                 &lt;ul&gt;\n                     &lt;li&gt;Los Angeles Metro&lt;/li&gt;\n                     &lt;li&gt;UCLA&lt;/li&gt;\n                     &lt;li&gt;Yindee Games&lt;/li&gt;\n                 &lt;/ul&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;/main&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> styles/style.css<pre><code>/* Global reset to ensure consistency across browsers */\n* {\n    font-family: Arial, sans-serif; /* Sets a default font for the whole page */\n    margin: 0; /* Removes default margins */\n    padding: 0; /* Removes default padding */\n    box-sizing: border-box; /* Makes sure borders and paddings are included in the element's total width and height */\n}\n\n/* Sets the background color of the whole page and ensures content fits the screen height */\nhtml {\n    background-color: aqua; /* Sets a light blue background color */\n}\n\n/* Applies to both &lt;html&gt; and &lt;body&gt; */\nhtml, body {\n    height: 80vh; /* Sets the height to 80% of the viewport height, making sure the content fits on the screen */\n    padding: 1rem; /* Adds a bit of space around the content for better readability */\n    box-sizing: border-box; /* Ensures padding does not add to the set height */\n}\n\n/* Defines the main layout of the page using CSS Grid */\nbody {\n    display: grid; /* Enables CSS Grid layout */\n    grid-template-areas: \n        \"header\" /* Top area for the header */\n        \"main\"   /* Middle area for the main content */\n        \"footer\"; /* Bottom area for the footer */\n    grid-template-rows: auto 1fr auto; /* Sizes: auto for header and footer to fit content, 1fr for main to fill remaining space */\n}\n\n/* Sets up the layout for the main content area, dividing it into two columns */\nmain {\n    display: grid; /* Enables CSS Grid within the main element */\n    grid-template-areas:\n        \"portfolio map\"; /* Divides the main area into portfolio and map sections side by side */\n    grid-template-columns: 1fr 1fr; /* Allocates equal width to both sections */\n}\n\n/* Grid area assignments for each major section, linking them to their respective areas in the grid */\nheader { \n    grid-area: header; /* Assigns the header to its grid area */\n}\n\nmain { \n    grid-area: main; /* Assigns the main content to its grid area */\n}\n\n.portfolio {\n    grid-area: portfolio;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n\n#map { \n    grid-area: map; /* Assigns the map section to its grid area */\n    height: 80vh; /* Sets the map's height to 80% of the viewport height */\n}\n\n#footer {\n    grid-area: footer;\n    padding: 5px; /* Adds padding for better spacing */\n    background-color: #4677a0; /* Sets a dark background for contrast */\n    color: #fff; /* Ensures text is readable against the dark background */\n    text-align: center; /* Centers the footer content */\n}\n\n#contents{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n}\n</code></pre>", "tags": ["Lab 3", "Buttons", "Events", "Event Listeners", "JavaScript"]}, {"location": "labs/week2/3/", "title": "\u2705 Final Template Code", "text": "index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with MapLibreGl&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- MapLibreGL's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.css\" /&gt;\n\n        &lt;!-- MapLibreGL's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;div id=\"contents\"&gt;&lt;/div&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                 &lt;h2&gt;Where I work&lt;/h2&gt;\n                 &lt;ul&gt;\n                     &lt;li&gt;Los Angeles Metro&lt;/li&gt;\n                     &lt;li&gt;UCLA&lt;/li&gt;\n                     &lt;li&gt;Yindee Games&lt;/li&gt;\n                 &lt;/ul&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;/main&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> js/init.js<pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets-v2-light/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: [-118.4430,34.0691], // Starting position [lng, lat]\n    zoom: 15 // Starting zoom level\n});\n\nfunction addMarker(lat,lng,title,message){\n    let popup_message = `&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`\n    new maplibregl.Marker()\n        .setLngLat([lng, lat])\n        .setPopup(new maplibregl.Popup()\n            .setHTML(popup_message))\n        .addTo(map)\n    createButtons(lat,lng,title);\n    return message\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // (1)! \n    newButton.id = \"button\"+title; // (2)! \n    newButton.innerHTML = title; // (3)! \n    newButton.setAttribute(\"lat\",lat); // (4)! \n    newButton.setAttribute(\"lng\",lng); // (5)! \n    newButton.addEventListener('click', function(){\n        map.flyTo({\n            center: [lng,lat], //(6)!\n        })\n    })\n    document.getElementById(\"contents\").appendChild(newButton); //(7)! \n}\n\naddMarker(34.070,-118.444, \"UCLA\", \"Where I work on campus\")\naddMarker(34.056,-118.234, \"Metro\", \"Where I work at Metro\")\naddMarker(34.059,-118.374, \"Games\", \"Where I work at games\")\n</code></pre> styles/style.css<pre><code>/* Global reset to ensure consistency across browsers */\n* {\n    font-family: Arial, sans-serif; /* Sets a default font for the whole page */\n    margin: 0; /* Removes default margins */\n    padding: 0; /* Removes default padding */\n    box-sizing: border-box; /* Makes sure borders and paddings are included in the element's total width and height */\n}\n\n/* Sets the background color of the whole page and ensures content fits the screen height */\nhtml {\n    background-color: aqua; /* Sets a light blue background color */\n}\n\n/* Applies to both &lt;html&gt; and &lt;body&gt; */\nhtml, body {\n    height: 80vh; /* Sets the height to 80% of the viewport height, making sure the content fits on the screen */\n    padding: 1rem; /* Adds a bit of space around the content for better readability */\n    box-sizing: border-box; /* Ensures padding does not add to the set height */\n}\n\n/* Defines the main layout of the page using CSS Grid */\nbody {\n    display: grid; /* Enables CSS Grid layout */\n    grid-template-areas: \n        \"header\" /* Top area for the header */\n        \"main\"   /* Middle area for the main content */\n        \"footer\"; /* Bottom area for the footer */\n    grid-template-rows: auto 1fr auto; /* Sizes: auto for header and footer to fit content, 1fr for main to fill remaining space */\n}\n\n/* Sets up the layout for the main content area, dividing it into two columns */\nmain {\n    display: grid; /* Enables CSS Grid within the main element */\n    grid-template-areas:\n        \"portfolio map\"; /* Divides the main area into portfolio and map sections side by side */\n    grid-template-columns: 1fr 1fr; /* Allocates equal width to both sections */\n    grid-area: main; /* Assigns the main area to its grid area */\n}\n\n/* Grid area assignments for each major section, linking them to their respective areas in the grid */\nheader { \n    grid-area: header; /* Assigns the header to its grid area */\n}\n\n.portfolio {\n    grid-area: portfolio;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n\n#map { \n    grid-area: map; /* Assigns the map section to its grid area */\n    height: 80vh; /* Sets the map's height to 80% of the viewport height */\n}\n\n#footer {\n    grid-area: footer;\n    padding: 5px; /* Adds padding for better spacing */\n    background-color: #4677a0; /* Sets a dark background for contrast */\n    color: #fff; /* Ensures text is readable against the dark background */\n    text-align: center; /* Centers the footer content */\n}\n\n#contents{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n}\n</code></pre> <p>Now you should be ready to take on the lab assignment!</p>"}, {"location": "labs/week2/extra/", "title": "Time Permitting: Creating a GeoJSON file", "text": "<p>Our class projects will connect information from our surveys to our map will, so first we will practice by creating a GeoJSON file of our own!</p>"}, {"location": "labs/week2/extra/#the-power-of-people-based-web-mapping", "title": "The power of people-based web mapping", "text": "<p>Let\u2019s put to practice what web development and GIS can do for empowering our own stories.</p> <p>Head over to GeoJSON.io:</p> <ul> <li>http://www.geojson.io/</li> </ul> <p>Click on the marker  tool:</p> <p></p> <p>Click on a location of interest to you:</p> <p></p> <p>Switch to the Table view by clicking on  Table:</p> <p></p> <p>Add a data column by clicking on  new column :</p> <p></p> <p>Call it place and click <code>OK</code>:</p> <p></p> <p>Click inside the <code>place</code> column</p> <p></p> <p>Type in a description for the <code>place</code>, in this case I called it home.</p> <p></p> <p>Zoom out by pressing the  button or ++ minus ++ key:</p> <p></p> <p>Click the edit  button:</p> <p></p> <p>Click on the marker and move it the adjust the location:</p> <p></p> <p>Click the  edit  button and then Save to save your edits:</p> <p></p> <p>Add a new column called color, to put some color to your map later.</p> <p></p> <p>When you are done, save your file by going to the top menu\u2019s Save option:</p> <p></p> <p>Click GeoJSON:</p> <p></p> <p>Download the file to your computer:</p> <p></p> <p>Copy the file into your project folder:</p> <p></p>"}, {"location": "labs/week2/extra/#in-class-exercise-3-leaving-your-marker-on-the-map", "title": "\u26bdIn-class Exercise #3 - Leaving your mark(er) on the map!", "text": "<p>Go back and add more points to your GeoJSON file.</p> <p>Tasks</p> <ol> <li>Add some points into your GeoJSON file</li> <li>Save the file and add it to your lab3 folder</li> </ol> <p>After finishing the exercise, think about how empowering it was for you to be able to add data to the map yourselves. Whether you were clicking random spots or trying to find your old favorite places to visit, the ability to mark things is a reclaiming of mapping for yourself. This sense of staking a claim is what is meant when we refer to \u201cempowering community voices\u201d.</p>"}, {"location": "labs/week2/extra/#final-checkpoint-add-your-geojson-to-your-map", "title": "\ud83c\udfc1Final Checkpoint - Add your GeoJSON to your map", "text": "<ol> <li> <p>Make sure your GeoJSON file is in your <code>week2</code> folder!</p> </li> <li> <p>Take note of the filename! (typically it is called <code>map.geojson</code>)</p> </li> <li> <p>Modify your <code>js/init.js</code> file to add the GeoJSON file to your map:</p> </li> </ol> <p>Warning</p> <p>Make sure to replace <code>NAME_OF_YOUR_GEOJSON.geojson</code> with the name of your GeoJSON file!</p> js/init.js<pre><code>fetch('NAME_OF_YOUR_GEOJSON.geojson').then(\n    response =&gt; response.json()\n).then(\n    data =&gt; {\n        map.addSource('places', {\n            'type': 'geojson',\n            'data': data\n        });\n        map.addLayer({\n            'id': 'places',\n            'type': 'circle',\n            'source': 'places',\n            'paint': {\n                'circle-color': '#4264fb',\n                'circle-radius': 6,\n                'circle-stroke-width': 2,\n                'circle-stroke-color': '#ffffff'\n            }\n        });\n    }\n);\n</code></pre>"}, {"location": "labs/week3/", "title": "For-hoops and Geo-J-cieON", "text": "<p>Adding functionality to our MapLibreGL</p> <p></p> <p>Goals</p> <ul> <li>Create a GeoJSON online and it to the map with JavaScript</li> <li>Understand how JavaScript works with HTML and CSS</li> <li>Understand how JavaScript variables, functions, methods work together</li> </ul>", "tags": ["Lab 3", "GeoJSON", "Buttons", "Event Listeners"]}, {"location": "labs/week3/#lab-outline", "title": "Lab Outline", "text": "<ol> <li>Creating a GeojSON</li> <li>Fetch and then statements</li> <li>For-Loops</li> </ol>", "tags": ["Lab 3", "GeoJSON", "Buttons", "Event Listeners"]}, {"location": "labs/week3/#starting-template-code-for-lab-3", "title": "Starting Template Code for lab #3", "text": "<p>Use the following template code or your lab assignment #2:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with MapLibreGl&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- MapLibreGL's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.css\" /&gt;\n\n        &lt;!-- MapLibreGL's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;div id=\"contents\"&gt;&lt;/div&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                 &lt;h2&gt;Where I work&lt;/h2&gt;\n                 &lt;ul&gt;\n                     &lt;li&gt;Los Angeles Metro&lt;/li&gt;\n                     &lt;li&gt;UCLA&lt;/li&gt;\n                     &lt;li&gt;Yindee Games&lt;/li&gt;\n                 &lt;/ul&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;/main&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> styles/style.css<pre><code>\n</code></pre> js/init.js<pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map',\n    style: 'https://api.maptiler.com/maps/streets-v2-light/style.json?key=wsyYBQjqRwKnNsZrtci1',\n    center: [-118.4430,34.0691],\n    zoom: 15\n});\n\nfunction addMarker(lat,lng,title,message){\n    let popup_message = `&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`\n    new maplibregl.Marker()\n        .setLngLat([lng, lat])\n        .setPopup(new maplibregl.Popup()\n            .setHTML(popup_message))\n        .addTo(map)\n    createButtons(lat,lng,title);\n    return message\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); \n    newButton.id = \"button\"+title; \n    newButton.innerHTML = title; \n    newButton.setAttribute(\"lat\",lat); \n    newButton.setAttribute(\"lng\",lng); \n    newButton.addEventListener('click', function(){\n        map.flyTo({\n            center: [lng,lat],\n        })\n    })\n    document.getElementById(\"contents\").appendChild(newButton);\n}\n</code></pre>", "tags": ["Lab 3", "GeoJSON", "Buttons", "Event Listeners"]}, {"location": "labs/week3/1/", "title": "Creating a GeoJSON file", "text": "<p>Learning how to connect information from our surveys to our map will be the key for our class projects, so first we will practice by creating a GeoJSON file of our own!</p>", "tags": ["Lab 3", "Creating a GeoJSON", "GeoJSON"]}, {"location": "labs/week3/1/#the-power-of-people-based-web-mapping", "title": "The power of people-based web mapping", "text": "<p>Let\u2019s put to practice what web development and GIS can do for empowering our own stories.</p> <p>Head over to GeoJSON.io:</p> <ul> <li>http://www.geojson.io/</li> </ul> <p>Click on the marker  tool:</p> <p></p> <p>Click on a location of interest to you:</p> <p></p> <p>Switch to the Table view by clicking on  Table:</p> <p></p> <p>Add a data column by clicking on  new column :</p> <p></p> <p>Call it place and click <code>OK</code>:</p> <p></p> <p>Click inside the <code>place</code> column</p> <p></p> <p>Type in a description for the <code>place</code>, in this case I called it home.</p> <p></p> <p>Zoom out by pressing the  button or ++ minus ++ key:</p> <p></p> <p>Click the edit  button:</p> <p></p> <p>Click on the marker and move it the adjust the location:</p> <p></p> <p>Click the  edit  button and then Save to save your edits:</p> <p></p> <p>Add a new column called color, to put some color to your map later.</p> <p></p> <p>When you are done, save your file by going to the top menu\u2019s Save option:</p> <p></p> <p>Click GeoJSON:</p> <p></p> <p>Download the file to your computer:</p> <p></p> <p>Copy the file into your project folder:</p> <p></p>", "tags": ["Lab 3", "Creating a GeoJSON", "GeoJSON"]}, {"location": "labs/week3/1/#in-class-exercise-1-leaving-your-marker-on-the-map", "title": "\u26bdIn-class Exercise #1 - Leaving  your mark(er) on the map!", "text": "<p>Go back and add more points to your GeoJSON file.</p> <p>Tasks</p> <ol> <li>Add some points into your GeoJSON file</li> <li>Save the file and add it to your lab3 folder</li> </ol> <p>After finishing the exercise, think about how empowering it was for you to be able to add data to the map yourselves. Whether you were clicking random spots or trying to find your old favorite places to visit, the ability to mark things is a reclaiming of mapping for yourself. This sense of staking a claim is what is meant when we refer to \u201cempowering community voices\u201d.</p>", "tags": ["Lab 3", "Creating a GeoJSON", "GeoJSON"]}, {"location": "labs/week3/1/#checkpoint-check-your-geojson", "title": "\ud83c\udfc1Checkpoint - Check your GeoJSON", "text": "<ol> <li> <p>Make sure your GeoJSON file is in your <code>week3</code> folder!</p> </li> <li> <p>Take note of the filename! The default from https://geojson.io is <code>map.geojson</code>, but you can change it to whatever you want.</p> </li> </ol>", "tags": ["Lab 3", "Creating a GeoJSON", "GeoJSON"]}, {"location": "labs/week3/2/", "title": "AshFetch\u2019em- Gotta Try and Catch\u2019-then all!", "text": "<p>Time to dive back into scary JavaScript waters! Before doing so, <code>let</code>\u2019s just make sure we are warmed-up for our swim!</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#back-to-javascript-variables-again", "title": "Back to JavaScript variables again!", "text": "", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#listsarrays-in-javascript", "title": "Lists/arrays in JavaScript", "text": "<p>In JavaScript, we can store multiple values in a single variable using an <code>array</code>!</p> <p>An <code>array</code> is a list of values separated by commas <code>,</code> and enclosed in square brackets <code>[]</code>.</p> <p>For example, an array of numbers can look like this:</p> <pre><code>let myArray = [1, 2, 3, 4, 5];\n</code></pre> <p>An array of strings can look like this:</p> <pre><code>let myStringArray = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"];\n</code></pre> <p>Arrays can also store different types of values, like this:</p> <pre><code>let myMixedArray = [1, \"apple\", 3.14, true];\n</code></pre> <p>Also, arrays are zero-indexed, meaning the first element is at index <code>0</code>, the second element is at index <code>1</code>, and so on.</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#accessing-elements-in-an-array", "title": "Accessing elements in an array", "text": "<p>To access an element in an array, we use the index of the element in square brackets <code>[]</code>.</p> <p>Using the previous example:</p> <pre><code>let myArray = [1, 2, 3, 4, 5];\nconsole.log(myArray[0]); // This will print 1\nconsole.log(myArray[1]); // This will print 2\n</code></pre>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#javascript-warm-up-using-variables", "title": "JavaScript Warm-up: Using Variables", "text": "<p>Instead of hard coding the values, we can use variables to store the values. For example, instead of writing: <pre><code>// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets-v2-light/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: [-118.4430,34.0691], // Starting position [lng, lat]\n    zoom: 15 // Starting zoom level\n});\n</code></pre></p> <p>We can write: <pre><code>// Declare global variables \nconst centerLngLat = [-118.444, 34.070];\nconst startingZoomLevel = 10;\n\n// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets-v2-light/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: centerLngLat, // Starting position [lng, lat]\n    zoom: startingZoomLevel // Starting zoom level\n});\n</code></pre></p> <p>This is a little more work, but it is much easier to reuse the values and also change them later since they are all defined at the top! For example, if we wanted to change the map center, we can just change the value of <code>centerLngLat</code> instead of having to change the value in multiple places.</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#finished-warm-up-code", "title": "Finished warm-up code", "text": "js/init.js<pre><code>// Declare global variables \nconst centerLngLat = [-118.444, 34.070];\nconst startingZoomLevel = 10;\n\n// Initialize the map\nconst map = new maplibregl.Map({\n    container: 'map',\n    style: 'https://api.maptiler.com/maps/streets-v2-light/style.json?key=wsyYBQjqRwKnNsZrtci1',\n    center: centerLngLat,\n    zoom: startingZoomLevel\n});\n\nfunction addMarker(lat,lng,title,message){\n    let popup_message = `&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`\n    new maplibregl.Marker()\n        .setLngLat([lng, lat])\n        .setPopup(new maplibregl.Popup()\n            .setHTML(popup_message))\n        .addTo(map)\n    createButtons(lat,lng,title);\n    return message\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); \n    newButton.id = \"button\"+title; \n    newButton.innerHTML = title; \n    newButton.setAttribute(\"lat\",lat); \n    newButton.setAttribute(\"lng\",lng); \n    newButton.addEventListener('click', function(){\n        map.flyTo({\n            center: [lng,lat],\n        })\n    })\n    document.getElementById(\"contents\").appendChild(newButton);\n}\n</code></pre>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#javascript-objects-boxing-up-our-variables", "title": "JavaScript <code>Objects</code> - Boxing-up our variables", "text": "<p>An <code>object</code> is a unique variable that can store many other variables! Think of it as a big box where many other Lego pieces or even other boxes can be put inside!</p> <pre><code>let myJavaScriptObject = {\"key_name\": \"value\", \"key_2_name\":\"value\"}\n</code></pre> <p>Your object can look like this too:</p> <pre><code>    let myJavaScriptObject = {\n        \"key_name\": \"value\", \n        \"key_2_name\":\"value\"\n        };\n</code></pre> Wait! Didn\u2019t we see this somewhere? <p>Yep! It was in the GeoJSON we created!</p> The meaning behind GeoJSON <p>GeoJSON actually stands for \u201cgeographic\u201d JavaScript Object Notation! </p> <p>In a JavaScript object, each value has a <code>key</code> and a <code>value</code>. </p> <p>The <code>:</code> symbol seperates the <code>key</code> from the <code>value</code>, like this:</p> <pre><code>let myObject = {\"key\":\"value\"};\n</code></pre> <ul> <li>Everything in an object is contained within the curly braces <code>{}</code></li> <li>Anything to left of the <code>:</code> is the key</li> <li>Anything to right of the <code>:</code> is the value</li> <li>New key-value pairs are separated by a comma, <code>,</code></li> <li> Warning ! Never end an object with a <code>,</code>!!!!</li> </ul>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#accessing-an-objects-property", "title": "Accessing an object\u2019s property", "text": "<p>To access an <code>object</code>\u2019s properties we use the <code>.</code> notation.</p> <p>For example, <code>myObject.key</code> will return the value, which in this case is.. <code>value</code>!</p> <p>No  spaces  in variable names!</p> <p>You cannot use spaces in variable definitions like <code>let my map;</code>, so stick with <code>camelCase</code> or <code>snake_case</code> when naming varibles with multiple words. When defining <code>key</code>s in <code>objects</code>, you can use spaces, but it is not recommended. </p> <p>If you do encounter a <code>key</code> with a space in it, like, <code>let anObject = \"my annoying key\": \"is this\"</code>, you cannot use the <code>.</code> syntax to access it you must use this alternative method: <code>anObject[\"my annoying key\"]</code></p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#in-class-exercise-2-variables-and-consolelog", "title": "\u26bdIn-class Exercise #2 - Variables and console.log", "text": "<p>Tasks</p> <ol> <li>Re-copy this week\u2019s lab template with <code>index.html</code> and <code>init.js</code></li> <li>Put the <code>centerLngLat</code> and <code>startingstartingZoomLevel</code> values into an <code>object</code> called <code>mapOptions</code>.</li> <li>Use <code>console.log()</code> to get the <code>object</code> to show up in the console in Firefox.</li> </ol> <p>Reminder: Working with our Dev Console</p> <p>In VS Code, start Live Server by clicking  <code>Go Live</code>.</p> <p>After Firefox runs, open the Console:</p> <ul> <li>You can either right click anywhere on a page with the mouse and clicking on <code>Inspect</code> or press F12 on the keyboard.</li> </ul> <p>Remember to think of the Console as the Command Line/Terminal for your browser.</p> Answer <p>Your code should look like the following:</p> <pre><code>    let mapOptions = {'centerLngLat': [-118.444,34.0709],'startingZoomLevel':5}\n    const map = new maplibregl.Map({\n        container: 'map', // container ID\n        style: 'https://api.maptiler.com/maps/streets-v2-light/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n        center: mapOptions.centerLngLat, // Starting position [lng, lat]\n        zoom: mapOptions.startingZoomLevel // Starting zoom level\n    });\n</code></pre> <ol> <li> <p>In the console, type in <code>mapOptions</code> (or whatever you chose to name your object) then press Enter. </p> </li> <li> <p>You should see your JavaScript object, <code>mapOptions</code>!</p> </li> </ol> <p>Reflection</p> <p>Think about the benefits of having variables in an object, is it easier to read for you? Harder?</p> <p>Knowing how to check the console will help us test our JavaScript code and even run functions and methods without leaving the browser!</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#wait-for-the-map-to-load-with-maponload", "title": "Wait for the map to load with <code>map.on('load')</code>", "text": "<p>Remember last lab where we discussed methods? Well, we can use a method called <code>map.on('load')</code> to run a function when the map is loaded! </p> <p>This is VERY important because we want to make sure the map is loaded before we add anything to it, such as our markers or GeoJSON data!</p> <p>Here is how it looks:</p> <pre><code>map.on('load', function() {\n    // Add your code to run after the map is loaded here\n});\n</code></pre>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#check-the-console", "title": "Check the console", "text": "<p>If you want to check if the map is loaded, you can use <code>console.log()</code> to see if the map is loaded!</p> <pre><code>map.on('load', function() {\n    // Add your code to run after the map is loaded here\n    console.log(\"Yay! The map is loaded!\")\n});\n</code></pre> <p>Go ahead and open the console to see if the message appears!</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#finished-exercise-2-code", "title": "Finished \u26bdExercise #2 code", "text": "<p>Make sure your code looks like the following before moving on:</p> js/init.js<pre><code>let mapOptions = {'centerLngLat': [-118.444,34.0709],'startingZoomLevel':5}\n\nconst map = new maplibregl.Map({\n    container: 'map',\n    style: 'https://api.maptiler.com/maps/streets-v2-light/style.json?key=wsyYBQjqRwKnNsZrtci1',\n    center: mapOptions.centerLngLat,\n    zoom: mapOptions.startingZoomLevel\n});\n\nfunction addMarker(lat,lng,title,message){\n    let popup_message = `&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`\n    new maplibregl.Marker()\n        .setLngLat([lng, lat])\n        .setPopup(new maplibregl.Popup()\n            .setHTML(popup_message))\n        .addTo(map)\n    createButtons(lat,lng,title);\n    return message\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); \n    newButton.id = \"button\"+title; \n    newButton.innerHTML = title; \n    newButton.setAttribute(\"lat\",lat); \n    newButton.setAttribute(\"lng\",lng); \n    newButton.addEventListener('click', function(){\n        map.flyTo({\n            center: [lng,lat],\n        })\n    })\n    document.getElementById(\"contents\").appendChild(newButton);\n}\n\nmap.on('load', function() {\n    // Add your code to run after the map is loaded here\n    console.log(\"Yay! The map is loaded!\")\n});\n</code></pre>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#time-to-fetch-and-then-do-something", "title": "Time to <code>fetch</code> and <code>then</code> do something", "text": "<p>To access data, we will use the JavaScript Fetch API to <code>fetch</code> our GeoJSON file and <code>then</code> add it to our map.</p> <p>When we access the GeoJSON file with the <code>Fetch</code> API we then get many <code>methods</code> to use with it.</p> <p>A <code>fetch</code> looks like this:</p> <p><code>fetch(\"map.geojson\")</code></p> <p>Wait! No <code>variable</code> declaration?! </p> <p>Why do you think so?</p> Answer <p>The <code>fetch</code> API is actually a built-in function for <code>JavaScript</code>, much like <code>console.log()</code>!</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#good-lets-carry-on-then", "title": "Good? Let\u2019s carry on <code>then</code>!", "text": "<p><code>fetch</code> actually does nothing by itself! It needs to do something with the data. Thus, <code>fetch</code> is almost always used together with the <code>then</code> method as follows:</p> <pre><code>fetch(\"map.geojson\") //(1)! \n    .then(function aFunctionName(data){//(2)!\n        return data.json()//(3)!\n    })\n    .then(function anotherFunctionName(data){ //(4)!\n        // Do something with the data\n        processData(data);\n    });\n</code></pre> <ol> <li><code>map.geojson</code> is location of the GeoJSON file relative to our file. If you moved the file to a subdirectory called <code>data</code>, then you would have to make this <code>data/map.geojson</code>.</li> <li>Here is our first chain, we are trying to <code>fetch</code> our geojson file. We will call a <code>generic</code> function in here.</li> <li>For the next step we need a <code>json</code>, so we <code>return</code> the value as a <code>json</code> with the <code>.json()</code> method!</li> <li>This is the next <code>then</code> i.e. our second chain!</li> <li>This calls <code>L.geoJSON()</code> and adds our <code>data</code> to the map.</li> </ol> <p>Catch-ing errors</p> <p>If there is an error in the <code>fetch</code> or <code>then</code> methods, you can use the <code>catch</code> method to catch the error and do something with it. </p> <p>Here is an example:</p> <pre><code>fetch(\"map.geojson\")\n    .then(function aFunctionName(data){\n        return data.json();\n    })\n    .then(function anotherFunctionName(data){\n        // Do something with the data\n        processData(data);\n    });\n    .catch(function(error) {\n        console.log(\"An error occurred: \", error);\n    });\n</code></pre> <p>The <code>catch</code> method will catch any errors that occur in the <code>fetch</code> or <code>then</code> methods and log them to the console.</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#anoynmous-functions", "title": "Anoynmous <code>functions</code>", "text": "<p>Since our <code>.then</code> is a one-time call, we can actually avoid naming the function! This is because we will not be using it again! </p> <p>So we can make our <code>function</code> anoymous by removing the name part of it and using the <code>=&gt;</code> symbol!</p> <p>Here\u2019s how the simpler <code>fetch-then</code> should look:</p> <pre><code>fetch(\"map.geojson\") //(1)! \n    .then(response =&gt; { //(2)! \n        return response.json();\n    })\n    .then(data =&gt;{ //(3)!\n        // do something with the data\n    });\n</code></pre> <p>Looks much better, right? Well\u2026 We can shorten it even more!!!</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#what-is-this", "title": "WHAT IS THIS <code>=&gt;</code> ?!!!", "text": "<p>The <code>=&gt;</code> is a shortcut to define an <code>anoynmous</code> function and is called an <code>arrow-function</code>!</p> <p>Going forward we will use the <code>arrow-function</code> because it is shorter, but if you want to use the more verbose <code>function</code> syntax (like <code>function(data){}</code>) you can.</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#putting-our-fetch-and-then-into-the-maponload", "title": "Putting our <code>fetch</code> and <code>then</code> into the <code>map.on('load')</code>", "text": "<p>Since we want to make sure the map is loaded before we add our GeoJSON data, we will put our <code>fetch</code> and <code>then</code> into the <code>map.on('load')</code> method!</p> <p>Here is how it looks:</p> <pre><code>map.on('load', function() {\n    fetch(\"map.geojson\")\n        .then(response =&gt; { \n            return response.json();\n        })\n        .then(data =&gt;{\n            // do something with the data\n        });\n});\n</code></pre>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#create-a-function-to-processdata", "title": "Create a function to <code>processData()</code>", "text": "<p>This function will loop through each of the data and apply various functions to it, such as adding markers or buttons. A function like this is useful as a <code>helper</code> function because it can separate what we want the website to do from the immediate data processing.</p> <p>Here is how it looks:</p> <pre><code>function processData(results) {\n    console.log(results);\n}\n\nmap.on('load', function() {\n    fetch(\"map.geojson\")\n        .then(response =&gt; { \n            return response.json();\n        })\n        .then(data =&gt;{\n            processData(data);\n        });\n});\n</code></pre> <p>Alright! Now the stage is set to talk about <code>for-loops</code> and <code>arrays</code>!</p>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/2/#checkpoint", "title": "\ud83c\udfc1Checkpoint", "text": "<ul> <li>You should have a <code>map.geojson</code> file in the same directory as your <code>index.html</code> and <code>init.js</code> files.</li> <li>You should have a <code>map.on('load')</code> method that <code>fetch</code>es the <code>map.geojson</code> file and <code>then</code> calls a <code>processData</code> function.</li> </ul> <p>Before moving on, check to see if JavaScript code looks like the following:</p> js/init.js<pre><code>// declare variables\nlet mapOptions = {'centerLngLat': [-118.444,34.0709],'startingZoomLevel':5}\n\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets-v2-light/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: mapOptions.centerLngLat, // Starting position [lng, lat]\n    zoom: mapOptions.startingZoomLevel // Starting zoom level\n});\n\nfunction addMarker(lat,lng,title,message){\n    let popup_message = `&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`\n    new maplibregl.Marker()\n        .setLngLat([lng, lat])\n        .setPopup(new maplibregl.Popup()\n            .setHTML(popup_message))\n        .addTo(map)\n    createButtons(lat,lng,title);\n    return message\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // (1)! \n    newButton.id = \"button\"+title; // (2)! \n    newButton.innerHTML = title; // (3)! \n    newButton.setAttribute(\"lat\",lat); // (4)! \n    newButton.setAttribute(\"lng\",lng); // (5)! \n    newButton.addEventListener('click', function(){\n        map.flyTo({\n            center: [lng,lat], //(6)!\n        })\n    })\n    document.getElementById(\"contents\").appendChild(newButton); //(7)! \n}\n\n\nmap.on('load', function() {\n    fetch(\"map.geojson\")\n        .then(response =&gt; response.json())\n        .then(data =&gt; {\n            processData(data); // Call processData with the fetched data\n        });\n});\n\nfunction processData(data) {\n    console.log(data);\n}\n</code></pre>", "tags": ["Lab 3", "Fetch and Then", "JavaScript"]}, {"location": "labs/week3/3/", "title": "For-hoops", "text": "<p>Let\u2019s take a break from our mapping code and focus on <code>for-loop</code>s and the <code>forEach</code> loop in JavaScript. Loops are critical for automating tasks and are the backbone of programming.</p>"}, {"location": "labs/week3/3/#what-is-a-for-loop", "title": "What is a <code>for-loop</code>?", "text": "<p>A <code>for-loop</code> means is to <code>go through the items and do something</code>. Loops are one of the most critical tool for programmers for automating tasks.</p> <p>Note!!</p> <p>The following <code>for-loop</code> is visualized for demonstration purposes only, please keep the beginning your loops to one single line for easier readability. Start a line break after the first <code>{</code>.</p> <p>For example (correct way to start a loop):</p> <pre><code>for (let i = 0; i &lt; myArray.length; i++) {\n    // do your loop here\n}\n</code></pre> Example for-loop for demo ONLY!<pre><code>  let myArray = ['hello','this','is','an','array']\n  for ( //(1)!\n        let i = 0; //(2)!\n        i &lt; myArray.length; //(3)!\n        i++){ //(4)!\n          // loop through something \n          // you can access `[i]` to get the current item in the array\n        } //(5)!\n</code></pre> <ol> <li><code>for</code> is a keyword for starting the <code>for loop</code></li> <li><code>(let i = 0;</code> is a placeholder variable for counting, <code>i</code> can be anything, but it has be consistent in the <code>for loop</code>.</li> <li><code>i &lt; myArray.length</code> basically says, \u201crun this loop as long as it is less than the content in myArray.\u201d</li> <li><code>i++</code> means keep adding while the loop is able to run</li> <li><code>{}</code> and finally the brackets are the code block to execute while the loop runs.</li> </ol> <p>This is the basic example of a <code>for</code> loop. </p> <p>When the loop ends, we say that the loop is broken out of:</p> <p></p> <p>In the example above, notice that <code>myArray</code> is a JavaScript array. When the array hits the last item, the loop stops. </p> <p>Or in the case of hoopa, it is <code>hoopa</code>-bound:</p> <p></p> <p>But actually, hoopa would is better suited to multiple dimensions, right?</p>"}, {"location": "labs/week3/3/#multidimensional-arrays", "title": "Multidimensional Arrays", "text": "<p>Well, in the example above, <code>myArray</code> is a one-dimensional array, meaning it is a list of items with one set of brackets:</p> <pre><code>let myArray = ['hello','this','is','an','one-dimensional','array']\n</code></pre> <p>However, most of the time, we will be working with multidimensional arrays, which are arrays within arrays. The term we use for this is <code>nested</code> or <code>multidimensional</code> arrays.</p> <p>Here is an example of a multidimensional array with latitude and longitude values:</p> <pre><code>const sampleDataArray = [[37,-122],[32,-118],[39,-119],[36,-120]]\n</code></pre> <p>We can even add properties, like a name and a description to each item in the array:</p> <pre><code>const sampleDataArray = [[37,-122,'Wow!','This is the first marker in our array!'],[32,-118,'Nice!','Another marker in our array?!!'],[39,-119,'OMG!','This is marker 3!'],[36,-120,'Too cool!','Is this marker 4 school!']]\n</code></pre> <p>Order and getting disarrayed: problems with arrays</p> <p>While arrays (like <code>let thisArray=[0,2,9]</code>) are great for storing data, they are not the best for accessing data because they do not store the name of the field or data!! This means you have to remember the order of the data in the array to access or use them. </p> <p>For example, notice how we have to remember that the first item in the array is the <code>latitude</code> and the second item is the <code>longitude</code> in the <code>sampleDataArray</code> above.  This is why we use typically use objects that look like this: <code>let thisObject = {'latitude':37,'longitude':-122}</code> to store data, so we can access the data by name, not by order!</p>"}, {"location": "labs/week3/3/#iterable-items", "title": "Iterable Items", "text": "<p>Arrays, whether single dimensional or multidimensional are considered as <code>iterable</code> items.</p> <p>Loops can ONLY be done on iterable items (variables that you can count or go through), like numbers, lists, objects, and arrays.</p>"}, {"location": "labs/week3/3/#accessing-multidimensional-array-data", "title": "Accessing multidimensional array data", "text": "<p>To access the data within a multidimensional array, you can use the following syntax:</p> <pre><code>const sampleDataArray = [[37,-122,'Wow!','This is the first marker in our array!'],[32,-118,'Nice!','Another marker in our array?!!'],[39,-119,'OMG!','This is marker 3!'],[36,-120,'Too cool!','Is this marker 4 school!']]\n\nsampleDataArray[0] // returns [37,-122,'Wow!','This is the first marker in our array!']\nsampleDataArray[0][0] // returns 37\nsampleDataArray[0][1] // returns -122\nsampleDataArray[0][2] // returns 'Wow!'\nsampleDataArray[0][3] // returns 'This is the first marker in our array!'\n</code></pre> <p>If you are doing this in a <code>for-loop</code> that is using <code>i</code> as the counter, you can use the <code>i</code> to access the data in the array:</p> <pre><code>const sampleDataArray = [[37,-122,'Wow!','This is the first marker in our array!'],[32,-118,'Nice!','Another marker in our array?!!'],[39,-119,'OMG!','This is marker 3!'],[36,-120,'Too cool!','Is this marker 4 school!']]\n\nfor (let i = 0; i &lt; sampleDataArray.length; i++) {\n    console.log(sampleDataArray[i]) // returns [37,-122,'Wow!','This is the first marker in our array!']\n    console.log(sampleDataArray[i][0]) // returns 37\n    console.log(sampleDataArray[i][1]) // returns -122\n    console.log(sampleDataArray[i][2]) // returns 'Wow!'\n    console.log(sampleDataArray[i][3]) // returns 'This is the first marker in our array!'\n}\n</code></pre> <p>Notice that in arrays, the order that the information is stored MUST be consistent or will lead to problems in using the data!</p>"}, {"location": "labs/week3/3/#in-class-exercise-3-our-first-loop", "title": "\u26bdIn-class Exercise #3 - Our First Loop", "text": "Sample array for exercise<pre><code>const sampleDataArray = [[37,-122,'Wow!','This is the first marker in our array!'],[32,-118,'Nice!','Another marker in our array?!!'],[39,-119,'OMG!','This is marker 3!'],[36,-120,'Cool!','The marker is too cool 4 school!']]\n</code></pre> <p>Tasks</p> <ol> <li>Using the array above, make a <code>for-loop</code> that creates markers!  </li> </ol> Answer <p><pre><code>    const sampleDataArray = [[37,-122,'Wow!','This is the first marker in our array!'],[32,-118,'Nice!','Another marker in our array?!!'],[39,-119,'OMG!','This is marker 3!'],[36,-120,'Cool!','The marker is too cool 4 school!']]\n\n    for (let i = 0; i &lt; sampleDataArray.length; i++) { //(1)!\n        console.log(sampleDataArray[i]) //(2)!\n        addMarker(sampleDataArray[i][0],sampleDataArray[i][1],`${sampleDataArray[i][2]}`,`sampleDataArray[i][3]`) //(3)!\n    }\n</code></pre> 1.      This starts the loop by saying, <code>for the total length in our sampleDataArray</code> do something 2.      The <code>console.log()</code> checks our loop results. Warning, doing this for large datasets will slow down your website, so use this mainly for debugging purposes. 3.      We call the <code>addMarker()</code> function with the <code>sampleDataArray[i]</code> being the number that the loop is currently on. We use <code>sampleDataArray[i][0]</code> to get <code>latitude</code> and <code>sampleDataArray[i][1]</code> for longitude.</p>"}, {"location": "labs/week3/3/#forof-loop", "title": "<code>For...of</code> loop", "text": "<p>The for of loop is identical in function to the <code>for-loop</code> except that it does not have an automatically <code>iterating</code> variable. Since it has less variables, I think it is much easier to understand than the basic <code>for</code> loop.</p> <p>Here is the <code>for-of</code> loop in action:</p> <p><pre><code>const longString = 'hellooooooooooooo'\nconst array1 = ['a', 'b', 'c'];\n\n// this loops through an array\nfor (const stuff of array1){\n    console.log(stuff)\n}\n\n// this loops through a string!\nfor (const letter in longstring){\n    console.log(letter)\n}\n</code></pre> Do note that the <code>for...of</code> loops works for arrays, but the <code>for-in</code> syntax is used to loop through strings or objects!</p> <p>You can use any variable name in place of <code>letter</code> or <code>stuff</code> so long as you are clear about what is being looped over inside the scope brackets.</p>"}, {"location": "labs/week3/3/#in-class-exercise-4-for-of-loop", "title": "\u26bdIn-class Exercise #4 - <code>For-of</code> Loop", "text": "Sample array for exercise<pre><code>const sampleDataArray = [[37,-122,'Wow!','This is the first marker in our array!'],[32,-118,'Nice!','Another marker in our array?!!'],[39,-119,'OMG!','This is marker 3!'],[36,-120,'Cool!','The marker is too cool 4 school!']]\n</code></pre> <p>Tasks</p> <ol> <li>Re-write our first <code>for-loop</code>, with a<code>for-of</code> loop that also creates markers!  </li> </ol> Answer <pre><code>    const sampleDataArray = [[37,-122,'Wow!','This is the first marker in our array!'],[32,-118,'Nice!','Another marker in our array?!!'],[39,-119,'OMG!','This is marker 3!'],[36,-120,'Cool!','The marker is too cool 4 school!']]\n\n    for (const item of sampleDataArray){\n        addMarker(item[0],item[1],`${item[2]}`,`${item[3]}`)\n    }\n</code></pre> <p>Notice in the answer, there is no <code>automatic</code> increasing value, so we need to pass the <code>item</code> in as the value for the pop-up message! </p> <p>I think FOR my ease of understanding the code, not having to auto-increment (the <code>i++</code>) is a worthwhile trade-off!!!</p>"}, {"location": "labs/week3/3/#for-each-loop", "title": "<code>For Each</code> loop", "text": "<p>Out of <code>each</code> of the loops, the <code>for each</code> loop is the final and most important loop we will cover today. It is similar to the loops above, but there are two key differences:</p> <ol> <li><code>.forEach</code> requires a function</li> <li><code>.forEach</code>is an <code>array</code> method or built-in function for arrays- so it only works on arrays!!!!</li> </ol> <p>Those differences are important because when this loop executes a function for each array element. Also, since this <code>loop</code> is an array method, it doesn\u2019t start with a keyword!!</p> <p>Instead <code>.forEach()</code> follows the array that you want to call the loop on.</p> <p>Here is an example of the <code>forEach</code> loop:</p> <pre><code>let myArray = ['hello','this','is','an','array']\n\nmyArray.forEach(justChecking);\n\nfunction justChecking(data){\n    console.log(data)\n}\n</code></pre> <p>The <code>.forEach</code> method might be the easiest loop to understand because of the grammar implications:</p> <p><code>For Each</code>-&gt;<code>item in the array</code>-&gt; <code>do this function!</code></p> <p>Additionally, the <code>.forEach()</code> loop is important because it streamlines the process of applying a function to a list of items. This is a common scenario with arrays (lists) in the first place, since no one wants to program things by manually applying a function to hundres of items!!</p> <p>One draw back of using <code>.forEach()</code> in this way is that you can\u2019t isolate the data paramaters in a function.</p> <p>For example, this code will not work!</p> <p>forEach broken</p> <pre><code>const sampleDataArray = [{'lat':37,'lng':-122,'title':'Wow!','message':'This is the first marker in our array!'},{'lat':32,'lng':-118,'title':'Nice!','message':'Another marker in our array?!!'},{'lat':39,'lng':-119,'title':'OMG!','message':'This is marker 3!'},{'lat':36,'lng':-120,'title':'Cool!','message':'The marker is too cool 4 school!'}]\n\nsampleDataArray.forEach(justChecking(lat,lng));\n\nfunction justChecking(lat,lng){\n    console.log(lat,lng)\n}\n</code></pre> <p>You would have to write the code this way:</p> <p>forEach fixed</p> <pre><code>const sampleDataArray = [{'lat':37,'lng':-122,'title':'Wow!','message':'This is the first marker in our array!'},{'lat':32,'lng':-118,'title':'Nice!','message':'Another marker in our array?!!'},{'lat':39,'lng':-119,'title':'OMG!','message':'This is marker 3!'},{'lat':36,'lng':-120,'title':'Cool!','message':'The marker is too cool 4 school!'}]\n\nsampleDataArray.forEach(justChecking);\n\nfunction justChecking(data){\n    console.log(data.lat,data.lng)\n}\n</code></pre> <p>One way to be able to specify data values with <code>.forEach()</code> is to use the arrow functions!!</p>"}, {"location": "labs/week3/3/#foreach-and-arrow-functions-revisited", "title": "<code>.forEach()</code> and arrow (<code>=&gt;</code>) functions revisited", "text": "<p>Since a <code>.forEach()</code> loop requires a function, if the function is not needed anywhere else, it is recommended to simplify the loop with an arrow/anonymous function, which we covered in the previous module.</p> <p>Of course, always stick with what you think makes the most sense to you as a coder!</p> <p>Remember, an anonymous function is a function without a name and uses the <code>=&gt;</code> (arrow) syntax.</p> <p>Here is how the same <code>forEach()</code> loop looks like with an arrow function:</p> <pre><code>const sampleDataArray = [{'lat':37,'lng':-122,'title':'Wow!','message':'This is the first marker in our array!'},{'lat':32,'lng':-118,'title':'Nice!','message':'Another marker in our array?!!'},{'lat':39,'lng':-119,'title':'OMG!','message':'This is marker 3!'},{'lat':36,'lng':-120,'title':'Cool!','message':'The marker is too cool 4 school!'}]\n\nsampleDataArray.forEach(data=&gt;{justChecking(data)});\n\nfunction justChecking(data){\n    console.log(data)\n}\n</code></pre> <p>Adding the arrow function allows you to use multiple parameters in the function call to treat the <code>data</code> from <code>sampleDataArray</code> as if it were an object, like so: <code>sampleDataArray.lat</code>, or <code>sampleDataArray.lng</code></p> <pre><code>const sampleDataArray = [{'lat':37,'lng':-122,'title':'Wow!','message':'This is the first marker in our array!'},{'lat':32,'lng':-118,'title':'Nice!','message':'Another marker in our array?!!'},{'lat':39,'lng':-119,'title':'OMG!','message':'This is marker 3!'},{'lat':36,'lng':-120,'title':'Cool!','message':'The marker is too cool 4 school!'}]\n\nsampleDataArray.forEach(data=&gt;{addMarker(data.lat,data.lng,data.title,data.message)});\n</code></pre>"}, {"location": "labs/week3/3/#dot-notation-vs-bracket-notation", "title": "<code>.</code> (dot) notation vs. <code>[]</code> (bracket) notation", "text": "<p>Remember to access an object you typically would use the <code>.nameOfField</code> (dot) notation like so:</p> <p><code>arrayOfObjects.forEach(data =&gt; {data.name})</code></p> <p>But if there are spaces in the field name, you will have to use the <code>['name of field']</code> (bracket) notation.</p> <p>In the above example we can call <code>arrayOfObjects.forEach(data =&gt; {data['name']})</code> to access all of the name values in our data.</p> <p>Here is how the <code>forEach</code> loop would look like with the <code>.</code> (dot) notation:</p> <pre><code>let arrayOfObjects = [{'name':'hello','lat':37,'lng':-122},{'name':'world','lat':35,'lng':-119},{'name':'aa191','lat':36,'lng':-120}]\n\narrayOfObjects.forEach(feature =&gt; {\n    addMarker(feature.lat,feature.lng,feature.name,'This is marker ${data.name}')\n})\n</code></pre> <p>Personally, I prefer this over the other loop methods because it is easier to read and understand.</p>"}, {"location": "labs/week3/3/#class-exercise-5-your-first-foreach-loop", "title": "\u26bdClass Exercise #5 - Your first <code>forEach</code> loop", "text": "Sample array of objects for exercise<pre><code>let simpleArray = ['hello','this','is','an','array']\nconst arrayOfObjects = [{'lat':37,'lng':-122,'title':'Wow!','message':'This is the first marker in our array!'},{'lat':32,'lng':-118,'title':'Nice!','message':'Another marker in our array?!!'},{'lat':39,'lng':-119,'title':'OMG!','message':'This is marker 3!'},{'lat':36,'lng':-120,'title':'Cool!','message':'The marker is too cool 4 school!'}]\n</code></pre> <p>Tasks</p> <ol> <li>Create an array of objects 3 or more items</li> <li>Use a <code>.forEach()</code> loop on one of the arrays above.</li> <li><code>console.log()</code> the result.</li> <li>Try to use a <code>forEach</code> loop to create the markers instead!  </li> </ol> Answer <pre><code>    let simpleArray = ['hello','this','is','an','array']\n\n    simpleArray.forEach(checking)\n\n    function checking(aParameter){\n        console.log(aParameter)\n    }\n\n    const arrayOfObjects = [{'lat':37,'lng':-122,'title':'Wow!','message':'This is the first marker in our array!'},{'lat':32,'lng':-118,'title':'Nice!','message':'Another marker in our array?!!'},{'lat':39,'lng':-119,'title':'OMG!','message':'This is marker 3!'},{'lat':36,'lng':-120,'title':'Cool!','message':'The marker is too cool 4 school!'}]\n\n    for (const item of sampleDataArray){\n        addMarker(item[0],item[1],`Marker ${item}`,`This is marker ${item}`)\n    }\n\n    arrayOfObjects.forEach(data=&gt;{addMarker(data.lat,data.lng,data.title,data.message)});       \n</code></pre>"}, {"location": "labs/week3/3/#turning-our-geojson-data-into-markers", "title": "Turning our geojson data into markers", "text": "<p>There are numerous approaches that one can take using any of the loop methods described above, we will just focus on the <code>.forEach()</code> and <code>=&gt;</code> implmenetion.</p>"}, {"location": "labs/week3/3/#returning-to-our-processdata-function", "title": "Returning to our <code>processData()</code> function", "text": "<p>Now that we have a better understanding of loops, we can return to our <code>processData()</code> function and add the <code>addMarker()</code> function to the loop.</p> <p>First, let\u2019s make sure that our data is being processed correctly by adding <code>console.log()</code> statements to the function:</p> <pre><code>function processData(results){\n    console.log(results) //for debugging: this can help us see if the full set of results\n}\n</code></pre> <p>Notice how we are using the <code>results</code> variable to access the data, but there are two keys in the geojson, <code>type</code> and <code>features</code>. We are interested in the <code>features</code> key, which is an array of data points:</p> <p></p> <p>Also, notice that the <code>features</code> array is an array of objects, so we can use the <code>forEach()</code> loop to access the data in the array!!</p> <p>Now when you open the console it should show the full set of results in there!</p>"}, {"location": "labs/week3/3/#traversing-and-accessing-the-data", "title": "Traversing and accessing the data", "text": "<p>Now that we know the structure of the data, we can access the data in the <code>features</code> array by using the <code>feature</code> variable in the <code>.forEach()</code> loop. (Note: Like the <code>i</code> in the <code>for-loop</code>, <code>feature</code> can be anything, but it has to be consistent within the <code>forEach</code> loop you are using.)</p> <pre><code>function processData(results){\n    //console.log(results) //for debugging: this can help us see if the results are what we want\n    results.features.forEach(feature =&gt; {\n        console.log(feature) // for debugging: are we seeing each feature correctly?\n    })\n}\n</code></pre> <p>Doing this gives us our GeoJSON data in the console:</p> <p></p> <p>This should return the full set of results and each data point in the console! Since our data is a geojson, the data should be in the <code>features</code> array, and what we are interested in is the <code>geometry</code> and <code>properties</code> fields.</p> <p>GeoJSON structure</p> <ul> <li><code>type</code> is the type of data, which is <code>FeatureCollection</code> in this case</li> <li><code>features</code> is the array of data points</li> <li>each <code>feature</code> is an object with <code>geometry</code> and <code>properties</code> fields<ul> <li><code>geometry</code> is the coordinates of the point and contains <code>coordinates</code> which is an array of <code>[longitude,latitude]</code></li> <li><code>properties</code> is the data associated with the point, and contains <code>title</code> and <code>message</code> fields (or whatever else you authored in your geojson)</li> </ul> </li> </ul> <pre><code>function processData(results){\n    console.log(results) //for debugging: this can help us see if the full set of results \n    results.features.forEach(feature =&gt; {\n        console.log(feature) // for debugging: are we seeing each feature correctly?\n        console.log(feature.geometry.coordinates) // for debugging: are we seeing the coordinates correctly?\n        console.log(feature.properties) // for debugging: are we seeing the properties correctly?\n    })\n}\n</code></pre> <p>OMG!! The <code>.</code> returns?!</p> <p>Notice the dots in <code>feature.geometry.coordinates</code>?! Similar to <code>chaining</code> methods, we use the <code>.</code> to chain going down an <code>object</code> path. Why is that?! Well.. It has something to do with <code>classes</code>, but thats out of the <code>scope</code> of this class. (multiple coding puns intended.) If you really want to learn more, click here to read about Object-Oriented Programming and JavaScript: click if you dare!.</p> <p>If this works and you see the data in the console, click into the array to see if our data looks right:</p> <p></p> <p>Remember! <code>console.log()</code> is your life boat! </p> <p>Always check the console to see if our data and code is function properly!</p> <p>If it looks correct, now we can call our <code>addMarker()</code> function in the loop and populate our map with our geojson features!</p>"}, {"location": "labs/week3/3/#call-the-addmarker-function-in-a-loop", "title": "Call the <code>addMarker()</code> function in a loop", "text": "<p>With everything working correctly, let\u2019s call the <code>addMarker()</code> function in the <code>.forEach()</code> loop like so:</p> <pre><code>function processData(results){\n    //console.log(results) //for debugging: this can help us see if the results are what we want\n    results.features.forEach(feature =&gt; {\n        console.log(feature) // for debugging: are we seeing each feature correctly?\n        // the console log can make sure we have the right field names selected!\n        addMarker(feature.geometry.coordinates[1],feature.geometry.coordinates[0],feature.properties.title,feature.properties.message)\n    })\n}\n</code></pre> <p>Notice that the <code>geometry</code> field contains the <code>coordinates</code> field, which is an array of <code>[longitude,latitude]</code>. We access the <code>latitude</code> by using <code>feature.geometry.coordinates[1]</code> and the <code>longitude</code> by using <code>feature.geometry.coordinates[0]</code>. This is because <code>geojson</code> is stored in <code>[longitude,latitude]</code> format! If you want, you can actually make the loop more explicit like so:</p> <pre><code>function processData(results){\n    //console.log(results) //for debugging: this can help us see if the results are what we want\n    results.features.forEach(feature =&gt; {\n        //console.log(feature) // for debugging: are we seeing each feature correctly?\n        // the console log can make sure we have the right field names selected!\n        let coordinates = feature.geometry.coordinates;\n        let longitude = coordinates[0];\n        let latitude = coordinates[1];\n        let title = feature.properties.title;\n        let message = feature.properties.message;\n        addMarker(latitude,longitude,title,message);\n    });\n};\n</code></pre> <p>And viola! Your map should now be populated with the points on the survey!</p>"}, {"location": "labs/week3/3/#final-check-point", "title": "\ud83c\udfc1Final check point", "text": "<ul> <li>Add a <code>forEach</code> loop to your <code>processData()</code> function</li> <li>Check and access the <code>geometry</code> and <code>properties</code> fields in the loop</li> <li>Make sure the <code>addMarker()</code> function is called in the loop</li> </ul> <pre><code>// When the map is fully loaded, start adding GeoJSON data\nmap.on('load', function() {\n    fetch(\"map.geojson\")\n        .then(response =&gt; response.json())\n        .then(data =&gt; {\n            processData(data); // Call processData with the fetched data\n        });\n});\n\nfunction processData(results){\n    //console.log(results) //for debugging: this can help us see if the results are what we want\n    results.features.forEach(feature =&gt; {\n        //console.log(feature) // for debugging: are we seeing each feature correctly?\n        // the console log can make sure we have the right field names selected!\n        let coordinates = feature.geometry.coordinates;\n        let longitude = coordinates[0];\n        let latitude = coordinates[1];\n        let title = feature.properties.title;\n        let message = feature.properties.message;\n        addMarker(latitude,longitude,title,message);\n    });\n};\n</code></pre> <p>Now you are ready for the lab assignment!</p>"}, {"location": "labs/week3/4/", "title": "\u2705 Final Template Code for Lab 3b", "text": "index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with MapLibreGl&lt;/title&gt;\n        &lt;!-- hint: remember to change your page title! --&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- MapLibreGL's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.css\" /&gt;\n\n        &lt;!-- MapLibreGL's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World\n            &lt;!-- hint: you can make a menu with other links here if you'd like --&gt;\n        &lt;/header&gt;\n\n        &lt;main&gt;\n            &lt;div class=\"portfolio\"&gt;\n                &lt;div id=\"contents\"&gt;&lt;/div&gt;\n                &lt;!-- Portfolio content goes here --&gt;\n                 &lt;h2&gt;Where I work&lt;/h2&gt;\n                 &lt;ul&gt;\n                     &lt;li&gt;Los Angeles Metro&lt;/li&gt;\n                     &lt;li&gt;UCLA&lt;/li&gt;\n                     &lt;li&gt;Yindee Games&lt;/li&gt;\n                 &lt;/ul&gt;\n            &lt;/div&gt;\n            &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;/main&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2024)\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> styles/style.css<pre><code>/* Global reset to ensure consistency across browsers */\n* {\n    font-family: Arial, sans-serif; /* Sets a default font for the whole page */\n    margin: 0; /* Removes default margins */\n    padding: 0; /* Removes default padding */\n    box-sizing: border-box; /* Makes sure borders and paddings are included in the element's total width and height */\n}\n\n/* Sets the background color of the whole page and ensures content fits the screen height */\nhtml {\n    background-color: aqua; /* Sets a light blue background color */\n}\n\n/* Applies to both &lt;html&gt; and &lt;body&gt; */\nhtml, body {\n    height: 80vh; /* Sets the height to 80% of the viewport height, making sure the content fits on the screen */\n    padding: 1rem; /* Adds a bit of space around the content for better readability */\n    box-sizing: border-box; /* Ensures padding does not add to the set height */\n}\n\n/* Defines the main layout of the page using CSS Grid */\nbody {\n    display: grid; /* Enables CSS Grid layout */\n    grid-template-areas: \n        \"header\" /* Top area for the header */\n        \"main\"   /* Middle area for the main content */\n        \"footer\"; /* Bottom area for the footer */\n    grid-template-rows: auto 1fr auto; /* Sizes: auto for header and footer to fit content, 1fr for main to fill remaining space */\n}\n\n/* Sets up the layout for the main content area, dividing it into two columns */\nmain {\n    display: grid; /* Enables CSS Grid within the main element */\n    grid-template-areas:\n        \"portfolio map\"; /* Divides the main area into portfolio and map sections side by side */\n    grid-template-columns: 1fr 1fr; /* Allocates equal width to both sections */\n    grid-area: main; /* Assigns the main area to its grid area */\n}\n\n/* Grid area assignments for each major section, linking them to their respective areas in the grid */\nheader { \n    grid-area: header; /* Assigns the header to its grid area */\n}\n\n.portfolio {\n    grid-area: portfolio;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n#map { \n    grid-area: map; /* Assigns the map section to its grid area */\n    height: 80vh; /* Sets the map's height to 80% of the viewport height */\n}\n\n#footer {\n    grid-area: footer;\n    padding: 5px; /* Adds padding for better spacing */\n    background-color: #4677a0; /* Sets a dark background for contrast */\n    color: #fff; /* Ensures text is readable against the dark background */\n    text-align: center; /* Centers the footer content */\n}\n\n#contents{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n}\n</code></pre> js/init.js<pre><code>// declare variables\nlet mapOptions = {'centerLngLat': [-118.444,34.0709],'startingZoomLevel':5}\n\nconst map = new maplibregl.Map({\n    container: 'map', // container ID\n    style: 'https://api.maptiler.com/maps/streets-v2-light/style.json?key=wsyYBQjqRwKnNsZrtci1', // Your style URL\n    center: mapOptions.centerLngLat, // Starting position [lng, lat]\n    zoom: mapOptions.startingZoomLevel // Starting zoom level\n});\n\nfunction addMarker(lat,lng,title,message){\n    let popup_message = `&lt;h2&gt;${title}&lt;/h2&gt; &lt;h3&gt;${message}&lt;/h3&gt;`\n    new maplibregl.Marker()\n        .setLngLat([lng, lat])\n        .setPopup(new maplibregl.Popup()\n            .setHTML(popup_message))\n        .addTo(map)\n    createButtons(lat,lng,title);\n    return message\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // (1)! \n    newButton.id = \"button\"+title; // (2)! \n    newButton.innerHTML = title; // (3)! \n    newButton.setAttribute(\"lat\",lat); // (4)! \n    newButton.setAttribute(\"lng\",lng); // (5)! \n    newButton.addEventListener('click', function(){\n        map.flyTo({\n            center: [lng,lat], //(6)!\n        })\n    })\n    document.getElementById(\"contents\").appendChild(newButton); //(7)! \n}\n\n// When the map is fully loaded, start adding GeoJSON data\nmap.on('load', function() {\n    fetch(\"map.geojson\")\n        .then(response =&gt; response.json())\n        .then(data =&gt; {\n            processData(data); // Call processData with the fetched data\n        });\n});\n\nfunction processData(results){\n    //console.log(results) //for debugging: this can help us see if the results are what we want\n    results.features.forEach(feature =&gt; {\n        //console.log(feature) // for debugging: are we seeing each feature correctly?\n        // assumes your geojson has a \"title\" and \"message\" attribute\n        let coordinates = feature.geometry.coordinates;\n        let longitude = coordinates[0];\n        let latitude = coordinates[1];\n        let title = feature.properties.title;\n        let message = feature.properties.message;\n        addMarker(latitude,longitude,title,message);\n    });\n};\n</code></pre> <p>You can use this template to finish this week\u2019s lab assignment!</p>"}, {"location": "weekly_materials/", "title": "Summary", "text": ""}, {"location": "weekly_materials/#weekly-overview", "title": "Weekly overview", "text": "Week Topic #1 GIS, Data, and Ethics  #2 Humanizing Technology  #3 Society, Technology, and Ethics  #4 Open Source and Web Mapping"}, {"location": "weekly_materials/#course-materials", "title": "Course Materials", "text": "Week Title Content Slides Recording 1 Introducing the course, GIS, data, and ethics Lecture Here Here 1 Hello World (Wide) Web Development Lab Here Here 2 MapLibRevisiting Portfolios + Humanizing Technology Lab + Lecture Here Here 2 JavaScript Writing some FUNctions Lab Here Here 3 Connecting the dots of technology and ethics Lecture Here Here 3 For-loops and Geo-J-cieON Lab Here Here 4 Ethical Software and Developing for Civil Society Lecture Here https://ucla.zoom.us/rec/share/BfOiS4yd_c9HH7Wl6cz1Gdhv14KId4C-v-8oZX3NyO76LrBIHfoGKazhB8mpQriD.53kDHw2KxqL9FW5t 4 Loops and Google FORMulating Data Lab + Lecture TBD TBD"}, {"location": "weekly_materials/week01/", "title": "Week 1 - GIS, Data, and Ethics", "text": "Date Type Description Slides Recording 6/24 Lecture Introducing the course, GIS, data, and ethics Here Here 6/26 Lab GITting Used to Web Development and JavaScript TBD TBD"}, {"location": "weekly_materials/week01/#lecture", "title": "Lecture", "text": "<p>Charting the course for the class and how it relates to GIS, data, and ethics.</p> <p>Lecture 1 Slides</p>"}, {"location": "weekly_materials/week01/#introducing-the-course-gis-data-and-ethics", "title": "Introducing the course, GIS, data, and ethics", "text": ""}, {"location": "weekly_materials/week01/#lab", "title": "Lab", "text": "<p>Learning how to use GitHub, VSCode, and some JavaScript.</p> <ul> <li>GITting Used to Web Development and JavaScript</li> </ul>"}, {"location": "weekly_materials/week01/#group-work", "title": "Group Work", "text": "<p>Start to form teams based on initially pre-assigned groups on this spreadsheet: </p> <ul> <li>https://tinyurl.com/24su-aa191-groups</li> </ul>"}, {"location": "weekly_materials/week01/#getting-started-help", "title": "Getting Started help", "text": "<ol> <li>Signing-up with GitHub</li> <li>Git Cloning: Downloading a repo to your computer</li> <li>Git Committing: Saving your changes to a repo</li> <li>Git Creating: Creating a new repo and inviting group members</li> <li>Submitting assginments</li> <li>Subtmitting Thinking Caps</li> </ol>"}, {"location": "weekly_materials/week01/#assignments", "title": "Assignments", "text": "<p>Warning</p> <p>Unless specified otherwise, all assignments are due at the beginning of class. Late assignments will be given half credit up until a week.</p>"}, {"location": "weekly_materials/week01/#due-monday-624", "title": "Due Monday 6/24", "text": "<ul> <li>Pre-course Survey</li> </ul>"}, {"location": "weekly_materials/week01/#due-wednesday-626", "title": "Due Wednesday 6/26", "text": "<ul> <li>Pre-lab #1</li> </ul>"}, {"location": "weekly_materials/week01/#due-monday-71", "title": "Due Monday 7/1", "text": "<ul> <li>Thinking Cap: What are problems with the way we use data and GIS?</li> <li>Finish the weekly reading [PDF]</li> </ul>"}, {"location": "weekly_materials/week01/#due-wednesday-73", "title": "Due Wednesday 7/3", "text": "<ul> <li>Group Assignment #1: Repository and Readme</li> </ul>"}, {"location": "weekly_materials/week02/", "title": "Week 2 - Humanizing Technology", "text": "Date Type Description Slides Recording 7/1 Critical Cartography and Civil Society Lecture Here Here 7/1 MapLibRevisiting your portfolios Lab 7/3 JavaScript Writing some FUNctions Lab Here Here"}, {"location": "weekly_materials/week02/#lecture", "title": "Lecture", "text": "<ul> <li> <p>Critical Cartography and Civil Society</p> </li> <li> <p>Discussion #1 - Document</p> </li> <li>Discussion #1 - Submission</li> </ul>"}, {"location": "weekly_materials/week02/#visiting-voice-mariah-tso-73", "title": "Visiting Voice: Mariah Tso (7/3)", "text": "<p>Mariah Tso is a Din\u00e9 woman, artist, and GIS Specialist for the Ralph J. Bunche Center and the Million Dollar Hoods Project.</p>"}, {"location": "weekly_materials/week02/#lab", "title": "Lab", "text": "<ul> <li>MapLibRevisiting your portfolios</li> <li>JavaScript Writing some FUNctions</li> </ul>"}, {"location": "weekly_materials/week02/#assignments", "title": "Assignments", "text": ""}, {"location": "weekly_materials/week02/#due-monday-71", "title": "Due Monday 7/1", "text": "<ul> <li>Thinking Cap: What are problems with the way we use data and GIS?</li> <li>Finish the weekly reading [PDF]</li> </ul>"}, {"location": "weekly_materials/week02/#due-wednesday-73", "title": "Due Wednesday 7/3", "text": "<ul> <li>Lab #1: Portfolio</li> <li>Group Assignment #1: Repository and Readme</li> <li>Pre-lab</li> </ul>"}, {"location": "weekly_materials/week02/#due-monday-78", "title": "Due Monday 7/8", "text": "<ul> <li>Whose map? Who is empowered and who is disempowered?</li> <li>Thinking Cap #2</li> </ul>"}, {"location": "weekly_materials/week02/#due-wednesday-710", "title": "Due Wednesday 7/10", "text": "<ul> <li>Lab Assignment #2</li> <li>Group Assignment #2</li> </ul>"}, {"location": "weekly_materials/week03/", "title": "Week 3 - Society, Technology, and Ethics", "text": "Date Type Description Slides Recording 7/8 Connecting the dots of technology and ethics Lecture Here Here 7/10 For-loops and Geo-J-cieON Lab Here Here"}, {"location": "weekly_materials/week03/#lecture", "title": "Lecture", "text": "<ul> <li>Connecting the dots of technology and ethics</li> </ul>"}, {"location": "weekly_materials/week03/#visiting-voice-yoh-kawano", "title": "Visiting Voice: Yoh Kawano", "text": "<p>Yoh Kawano is a digital humanist and associate professor at Reitaku University Japan(Japanese). His community empowerment is on narratives in Japan\u2019s Fukushima prefecture following the 2011 Tsunami.</p>"}, {"location": "weekly_materials/week03/#lab", "title": "Lab", "text": "<ul> <li>For-loops and Geo-J-cieON</li> </ul>"}, {"location": "weekly_materials/week03/#assignments", "title": "Assignments", "text": ""}, {"location": "weekly_materials/week03/#due-wednesday-710", "title": "Due Wednesday 7/10", "text": "<ul> <li>Lab Assignment #2</li> <li>Submit using the discussion post!!</li> </ul>"}, {"location": "weekly_materials/week03/#due-monday-715", "title": "Due Monday 7/15", "text": "<ul> <li>Thinking Cap #3</li> </ul>"}, {"location": "weekly_materials/week03/#due-wednesday-717", "title": "Due Wednesday 7/17", "text": "<ul> <li>Group Assignment #2</li> <li>Lab Assignment #3</li> </ul>"}, {"location": "weekly_materials/week04/", "title": "Week 4 - Open Source and Web Mapping", "text": "Date Type Description Slides Recording 7/15 Ethical Software and Developing for Civil Society Lecture [Here](../materials/AA191_S_W4_Lecture_4.pdf Here 7/17 Loops and Google FORMulating Data Lab + Lecture TBD TBD", "tags": ["Week 4"]}, {"location": "weekly_materials/week04/#lecture", "title": "Lecture", "text": "<ul> <li>Ethical Software and Developing for Civil Society</li> </ul>", "tags": ["Week 4"]}, {"location": "weekly_materials/week04/#visiting-voice-seunghee-cho", "title": "Visiting Voice: Seunghee Cho", "text": "<p>Seunghee Cho is a regional Sourcing Specialist at TomTom and a volunteer with the UN Smart Maps initiative. She has also led mapathon events and is an active part of the OpenStreetMap community in Korea.</p>", "tags": ["Week 4"]}, {"location": "weekly_materials/week04/#lab", "title": "Lab", "text": "<ul> <li>Google FORMulating Community-Based Empowerment</li> </ul>", "tags": ["Week 4"]}, {"location": "weekly_materials/week04/#assignments", "title": "Assignments", "text": "", "tags": ["Week 4"]}, {"location": "weekly_materials/week04/#due-monday-715", "title": "Due Monday 7/15", "text": "<ul> <li>Technology and Ethics</li> <li>What are your ethics with technology and society?</li> </ul>", "tags": ["Week 4"]}, {"location": "weekly_materials/week04/#due-wednesday-717", "title": "Due Wednesday 7/17", "text": "<ul> <li>Lab Assignment #3</li> <li>Pre-lab on Survey Design</li> <li>Group Assignment #3 Survey(Might be due on Monday 7/22)</li> </ul>", "tags": ["Week 4"]}, {"location": "weekly_materials/week04/#due-monday-722", "title": "Due Monday 7/22", "text": "<ul> <li>Reading on Design Justice</li> <li>Thinking Cap #4</li> </ul>", "tags": ["Week 4"]}]}